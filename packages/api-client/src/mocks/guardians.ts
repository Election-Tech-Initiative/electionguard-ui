/* eslint-disable max-classes-per-file */
import {
    AssignedGuardian,
    Guardian,
    ElectionPartialKeyChallenge,
    PublicKeySetApi,
} from '../models/guardian';
import {
    ElectionPartialKeyBackup,
    ElectionPartialKeyVerification,
    KeyCeremonyGuardian,
} from '../models/keyCeremony';
import { GuardianId, PublicKeySet } from '../models/election';

export const getAssignedGuardians = (): AssignedGuardian[] => [
    { sequenceOrder: 1, id: '1', name: 'Snow server' },
    { sequenceOrder: 2, id: '2', name: 'Lannister server' },
    { sequenceOrder: 3, id: '3', name: 'Magic server' },
    { sequenceOrder: 4, id: '4', name: 'Stark server' },
    { sequenceOrder: 5, id: '5', name: 'Targaryen server' },
];

export const postGuardian = async (
    _key_name: string,
    _guardian_id: string,
    _name: string,
    _sequence_order: number
): Promise<PublicKeySet | undefined> => ({
    election: {
        owner_id: 'guardian_1',
        sequence_order: 1,
        key: '03869C85F9F3C237DB5D6C63C637E8A84D91081F91CE5035186431FAAE205A180D00A7DF714ADF47819D5E9A70D47A7FE65E916553964940AEDF5213600207313EC4CDF60236FF7D89CDD9862D60C821F402A56E2BE460AF56E173259EED4475818EBEE5DA32911C40F3B69630E6EFAEB7646BEE2D358C78FD857CA42CD1A29B5E03D242161A23A06F0B94BFDF0A8219940A2112DDDF9370CC4D40FE260FF4B65FA2AF8B6F35B9492E3F5B06F7FCAFF97E50564D37BC81394DC0F051F5237E19D11D4C4950368E168ACDD330618AB6857D7619BCF6FC7E45BB0C59026299C02BCD20822F06F44CC1154026B413FEB54F21D8C8D0E182FFDF3721DA1D3D6235AED3DE3D206FC91AAFEC47D518B6AEC1990E93A08150EBBAC4948AF8DA750D095A2C48434DF0979E17E96073FD0B3AA8F77ECBCE4266A3BC561B63DA69B5352F040ED864E9CA36B55547BD3D2A08AADAF0FD9EFC9EF2104CFE916988806C01EF03C211249FC2D4081E0667D2C8F4B5D222084C0634F84B43A99FF358EB12DEEAE954B1083E0DB774A0E8397FFB8185A421914C5B8F7DBD4624077EB695588F0A2819DDC6B5713C2976C2F1B4BF713C9A246F8990BB0BF4B117A64192976F933FC80AF7F42E354CC635192B26ACB3579DFD71334621B3DB47A318EFF184ABF43AB7E31346EA9ACF0D049752C135FD91EDA833D7A98D04D1F45902FF4A098D48A0CD',
        coefficient_commitments: [
            '03869C85F9F3C237DB5D6C63C637E8A84D91081F91CE5035186431FAAE205A180D00A7DF714ADF47819D5E9A70D47A7FE65E916553964940AEDF5213600207313EC4CDF60236FF7D89CDD9862D60C821F402A56E2BE460AF56E173259EED4475818EBEE5DA32911C40F3B69630E6EFAEB7646BEE2D358C78FD857CA42CD1A29B5E03D242161A23A06F0B94BFDF0A8219940A2112DDDF9370CC4D40FE260FF4B65FA2AF8B6F35B9492E3F5B06F7FCAFF97E50564D37BC81394DC0F051F5237E19D11D4C4950368E168ACDD330618AB6857D7619BCF6FC7E45BB0C59026299C02BCD20822F06F44CC1154026B413FEB54F21D8C8D0E182FFDF3721DA1D3D6235AED3DE3D206FC91AAFEC47D518B6AEC1990E93A08150EBBAC4948AF8DA750D095A2C48434DF0979E17E96073FD0B3AA8F77ECBCE4266A3BC561B63DA69B5352F040ED864E9CA36B55547BD3D2A08AADAF0FD9EFC9EF2104CFE916988806C01EF03C211249FC2D4081E0667D2C8F4B5D222084C0634F84B43A99FF358EB12DEEAE954B1083E0DB774A0E8397FFB8185A421914C5B8F7DBD4624077EB695588F0A2819DDC6B5713C2976C2F1B4BF713C9A246F8990BB0BF4B117A64192976F933FC80AF7F42E354CC635192B26ACB3579DFD71334621B3DB47A318EFF184ABF43AB7E31346EA9ACF0D049752C135FD91EDA833D7A98D04D1F45902FF4A098D48A0CD',
            'C85CBBD23326D30F98D6081CEB97D2006C58A97F8C64C50D44543C12C75DCCBF84165C485E739450D31E594017BFA3C16BE95F105F7C3EBED914BC787723CBCA44F95AAA8118867E77E61837E415F6FA0561C3FE8D89D52897230C3EC03CB47D5572999B7CB9BFBB1E3FB1139C9B1D47C86E6BBA4C77F2F774DE2E55B9FBBFC0823BC43257E755F8825E8F0F147F55A74768DF0964B1275E3D85391C73F4E871881EEAEAC21594735258C458286FB11641887DCEA00C10BDD6669A13B5E22110A89262912B5D0E7A8C9E2818A9B14D23404290E646B754E2138EBF7F992F5E605B5EA444C5E2F57C098D08EBDFB9EFE8958F7C7A756D6C1122888D132559B8C9C65E109C320B78ED5AEBFADAB9282E4379B950326A42CB9B6413B9082F4BB4E8B1714A61B5D0EA28E3983F889CF94517E163C090E2A49EA395A361330DF3D7AB7A33B48747F77E815259064B1EE1CFBFD5168CF12048A6375268DBC2D97E8533B268177C852BA5ACC44EFA70830106D8C4B886822139C28C79645657FF0DF70F0DF17796AA987B8C1A18B76046B26A9DA4037033114FABB93C56876EE9A60F5A2BFE11FCD747880721191E2076BB84FFB16AF1EB8D9483DFA3F7CBD6D456B3098CC418F2A506CCF8FE7237C3C38E5B5F8310A2B4B8D764818B18F6E9305F24F068FFBF478D2102B536656016FE85D7E0E23BE544E8E7E7356A5AF7D35183F4B9',
        ],
        coefficient_proofs: [
            {
                challenge: '54786BC5E2A86127FDB4CAC572B15DC19D28853543E6B03C758C1341D87FA2D4',
                commitment:
                    'EF8F5D9161FCD2AA22B529B61B1EC1949A9F644E11B25D49B8BDC149E709E7C743F1A7B81E0ADA532249CAD249F771BF4690F9C4484D2C2E3C49777F853201FD2DF34B525695D3F045D4437AC11086BF4F8AECA021C9BD9FCC7DE0F06FD82B57A54F84377CEECF19FBE7A3755B5F87C958F536E3DE91108900331CF051BAD74F82E1B528711B208172F0EB07CFA80D864D57450ECA8F927B448E14D0E132EAA151F6700AA2A5724F263CEBCBF60A2C84FCEE908DFDFF1665A9C58E0EDEEACA322F2BE9D16A6DDB68EA0F2E01F7C2120265DE7C622E67E22A88880DBCBFCE8ED1E1CE7C6E640BCE6BB4D5D95EE5646C1345A62BE0238BFE3D3B58713898B61A5EBEF63CC0BABC7E7004469E58636FDA2C1A368728B7CDDFB6CD389B9969726CBA7A022AF0855F93515ED41D711955FEB307A0EE1A7A97DD474A249F0816A45579F4BD8FD5983BD6F2B86B1411FF7CC8695B4C199645C99003174C3978FB86A4D9B8B6AF5FFAA18B0C5A4CDC209D2AA0AF0F1331231BF6E074C2BCA9BC97B627C4C808BD1A4C209EA91C08C6F9289B398F161C251ECD6B348ED8F5BB4A8DA16F6DACD457A0F9CE015C9D7AA2C3A7521E2F2F6B8B139C559A0E1CD90701FCE6AB8D278B1A9E40C6FA519E2900923906DA9FD3DD78F9BA665DE698019EAAAFF643701A51CFB71C4364EDAF3DD2BD65A8F64148C8DBB34D2B6872957F1DD1229D7CAC',
                name: 'Schnorr Proof',
                public_key:
                    '03869C85F9F3C237DB5D6C63C637E8A84D91081F91CE5035186431FAAE205A180D00A7DF714ADF47819D5E9A70D47A7FE65E916553964940AEDF5213600207313EC4CDF60236FF7D89CDD9862D60C821F402A56E2BE460AF56E173259EED4475818EBEE5DA32911C40F3B69630E6EFAEB7646BEE2D358C78FD857CA42CD1A29B5E03D242161A23A06F0B94BFDF0A8219940A2112DDDF9370CC4D40FE260FF4B65FA2AF8B6F35B9492E3F5B06F7FCAFF97E50564D37BC81394DC0F051F5237E19D11D4C4950368E168ACDD330618AB6857D7619BCF6FC7E45BB0C59026299C02BCD20822F06F44CC1154026B413FEB54F21D8C8D0E182FFDF3721DA1D3D6235AED3DE3D206FC91AAFEC47D518B6AEC1990E93A08150EBBAC4948AF8DA750D095A2C48434DF0979E17E96073FD0B3AA8F77ECBCE4266A3BC561B63DA69B5352F040ED864E9CA36B55547BD3D2A08AADAF0FD9EFC9EF2104CFE916988806C01EF03C211249FC2D4081E0667D2C8F4B5D222084C0634F84B43A99FF358EB12DEEAE954B1083E0DB774A0E8397FFB8185A421914C5B8F7DBD4624077EB695588F0A2819DDC6B5713C2976C2F1B4BF713C9A246F8990BB0BF4B117A64192976F933FC80AF7F42E354CC635192B26ACB3579DFD71334621B3DB47A318EFF184ABF43AB7E31346EA9ACF0D049752C135FD91EDA833D7A98D04D1F45902FF4A098D48A0CD',
                response: 'A0ADDD55D6F60CDAA05CEABE36602DEF9F28641827FF03C10D52251EB440D3BD',
                usage: 'SecretValue',
            },
            {
                challenge: '2D601215859EE69D9F22ADA1CF87890E2DB24690C22A6D7FE3AEBAC3DCF4DFDB',
                commitment:
                    '2495834125705CB901A600BEF333F926AF9487425695F5F9F4FA35ACFA421498A05862F7A36567A96A59DBCF9544725B2E5217DA1D64CF64A11B9F5BF7BEE353A02A317D04000DEC45575105E1216F2F3DAD0F246B86EDB3A94E4F38FCACE9EC9F2E71442E59BFED3DFDEA1CDD27711D1D94DE125B16D9438AAFE220AE3418F1E016A34312ED5C57F617E4D1D2641C9D03D6FA53F8BE3893A0C874763232A5D422391BD975253A6FBB37EDC7A1AECDB5C8C9F86A01987132381417238C4B5FD4928A1C7D93E043095C779AADFC0253015C278B9145B53B8C88AE6B8C1CB1FC6D6E6EBFF1A1DA33C5DD52C868CDF36B0A56DF6036AD547061227743C4475119781DF3BE0C6EC1968D83BC8A4E8E6DA8FD52914ED798CDD9E9030D907B732364B5B284D7F491BAC8C86C112D62846CB3CEDA565FD4499E79DD8582A05B18EF212DF2624B02F85F439DE210DBAD939D74C8D521DF10C53AA00D78767A67A03E32D784DD9F18B1FEFDF5976D44145CC2A0E2EC65B04C4A1A3F8B04CD9C438927B1F5E9B8BB91BE8E6614604F436677872425180DD9F1B84D61CCC4099BF6CA07B780B030CFB75E1AF703899A3DEA389E0F62EF702E336A3336A29ABB2ACAE3083A29A68411CA436B83804021D0DD2FFE6F418AB30DA101C6C0E7FA8352BDF4629C2E4E74C63876B14DD8089B9723ABB71DB6A9D8B0335654FFC6821BAD44C6E66321',
                name: 'Schnorr Proof',
                public_key:

                response: 'DE5974E90A879F3823551D58561E5E3C398A9F3CB2E5C39F369A278D65705919',
                usage: 'SecretValue',
            },
        ],
    },
    auxiliary: {
        owner_id: 'guardian_1',
        sequence_order: 1,
        key: '-----BEGIN PUBLIC KEY-----MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAx7439jOBopQDFixGH8F9\\nswJlFCypNIcwz+D7KevomP2nIHrInurW5MNSH4bpqV2D3TgzaITxW2zSK6OCzOtx\\n0DJFv/g15g0hX+5J1G63WWSzOtHlywTP+hhvapyR9tySC+wyVttgq5U5mhgmBkWw\\n3RtUgfBoMjmIcPXC6+vl1w8YUuO2LFM5mX5EHEHNsnX+IDLR2s6cJoFiYUpi3V1c\\nr5i5lJ5JjPzkunl/+nOKuKOiWfpEzAkgxt+qpx8PPA1eZ53ng7Z2/qddXjKkkyfO\\nCY69cO/QZKbKHVRoxoqAwKbOChYQoK2qT3EcUlqWlm/JwWO9mwgDYaUnIr0Ew6JV\\nBpWp4xacsxhilvMLV7lAtYOSNqo7Wgd1rnvqxsAMTvJDpkhBVBai9eXWLgJL4k/m\\nXEo8XyA117fg+tIejvYJYiP7Wi3Rxjrwq/5pzAS+cB3dxH23PT3zdeSd3zMofZlK\\nd+oJzUfQ5/oRB9kAjN8/GduCq1WtfY/TUVGnv7sNBMNX/CSOsNMG51Uqt2rM9DQ0\\n6nV4rKhDEOOPVstu7yUEf2U3atU1jBDClKFe7VbXcyZPi4NaK5NwRjzTTkwG9h2i\\nEVJ60g2/uKLWPItKwLeVBtLd08hvU/Wbur8k6K1aPST8Sz8sSa2Vmv8e2pwFxr6R\\nO0aDMJrupa5JzlckxYM7MTkCAwEAAQ==-----END PUBLIC KEY-----',
    },
});

export const getGuardian = async (guardian_id: string): Promise<Guardian | undefined> => ({
    guardian_id,
    name: 'Benjamin Franklin',
    sequence_order: 1,
    number_of_guardians: 3,
    quorum: 2,
    election_keys: {},
    auxiliary_keys: {},
    backups: new Map<GuardianId, ElectionPartialKeyBackup>(),
    cohort_public_keys: new Map<GuardianId, PublicKeySet>(),
    cohort_backups: new Map<GuardianId, ElectionPartialKeyBackup>(),
    cohort_verifications: new Map<GuardianId, ElectionPartialKeyVerification>(),
    cohort_challenges: new Map<GuardianId, ElectionPartialKeyChallenge>(),
});

// get public-keys
//  {{guardian-url}}/api/{{version}}/guardian/public-keys?guardian_id=guardian_1
export const getGuardianPublicKeys = async (
    _guardian_id: string
): Promise<PublicKeySetApi[] | undefined> => [
    {
        election: 'election-key-1',
        auxiliary: {},
    },
];

export const findGuardians = async (): Promise<Guardian[] | undefined> => [
    {
        guardian_id: 'guardian_1',
        name: 'Benjamin Franklin',
        sequence_order: 1,
        number_of_guardians: 3,
        quorum: 2,
        election_keys: {},
        auxiliary_keys: {},
        backups: new Map<GuardianId, ElectionPartialKeyBackup>(),
        cohort_public_keys: new Map<GuardianId, PublicKeySet>(),
        cohort_backups: new Map<GuardianId, ElectionPartialKeyBackup>(),
        cohort_verifications: new Map<GuardianId, ElectionPartialKeyVerification>(),
        cohort_challenges: new Map<GuardianId, ElectionPartialKeyChallenge>(),
    },
];

export const backupGuardian = async (
    _guardian_id: string,
    _quorum: number,
    _public_keys: [],
    _override_rsa: boolean
): Promise<ElectionPartialKeyBackup[] | undefined> => [
    {
        election_id: 'election-1',
    },
    {
        election_id: 'election-2',
    },
];

export const backupVerificationGuardian = async (
    _guardian_id: string,
    _backup: any,
    _override_rsa: boolean
): Promise<boolean | undefined> => true;

export const backupChallengeGuardian = async (
    _guardian_id: string,
    _backup: any
): Promise<ElectionPartialKeyChallenge | undefined> => ({
    election_id: 'election-1',
});

export const verifyChallengeGuardian = async (
    _verifier_id: string,
    _challenge: any
): Promise<ElectionPartialKeyVerification | undefined> => ({
    election_id: 'election-1',
});

export const getGuardians = async (
    key_name: string,
    guardian_id: string
): Promise<KeyCeremonyGuardian[] | undefined> => [
    {
        /*
        A record of the public data exchanged between guardians.
        */
        key_name,
        guardian_id,
        name: 'John Doe',
        sequence_order: 1,
        number_of_guardians: 1,
        quorum: 1,
        public_keys: new PublicKeySet(),
        backups: [],
        verifications: [],
        challenges: [],
    },
];

export const putGuardians = async (_data: KeyCeremonyGuardian): Promise<boolean | undefined> =>
    true;

export const postGuardians = async (_data: KeyCeremonyGuardian): Promise<boolean | undefined> =>
    true;

export const findKeyGuardians = async (
    _skip: number,
    _limit: number,
    guardian_id: string
): Promise<KeyCeremonyGuardian[] | undefined> => [
    {
        /*
        A record of the public data exchanged between guardians.
        */
        key_name: 'key-name-1',
        guardian_id,
        name: 'John Doe',
        sequence_order: 1,
        number_of_guardians: 1,
        quorum: 1,
        public_keys: new PublicKeySet(),
        backups: [],
        verifications: [],
        challenges: [],
    },
];

export default getAssignedGuardians;
