/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class AuthClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Login For Access Token
     * @return Successful Response
     */
    login(body: Body_login_for_access_token_api_v1_auth_login_post): Promise<Token> {
        let url_ = this.baseUrl + "/api/v1/auth/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = Object.keys(body as any).map((key) => {
            return encodeURIComponent(key) + '=' + encodeURIComponent((body as any)[key]);
        }).join('&')

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: Response): Promise<Token> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Token.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ErrorMessage.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Token>(<any>null);
    }
}

export class UserClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Me
     * @param body (optional) 
     * @return Successful Response
     */
    me(body: Settings | undefined): Promise<UserInfo> {
        let url_ = this.baseUrl + "/api/v1/user/me";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "GET",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMe(_response);
        });
    }

    protected processMe(response: Response): Promise<UserInfo> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserInfo.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserInfo>(<any>null);
    }

    /**
     * Create User
     * @return Successful Response
     */
    create(body: Body_create_user_api_v1_user_create_post): Promise<any> {
        let url_ = this.baseUrl + "/api/v1/user/create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * Reset Password
     * @param body (optional) 
     * @return Successful Response
     */
    reset_password(username: string, body: Settings | undefined): Promise<any> {
        let url_ = this.baseUrl + "/api/v1/user/reset_password?";
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined and cannot be null.");
        else
            url_ += "username=" + encodeURIComponent("" + username) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processReset_password(_response);
        });
    }

    protected processReset_password(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }
}

export class V1Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Fetch Key Ceremony Guardian
     * @return Successful Response
     */
    guardianGet(key_name: string, guardian_id: string): Promise<GuardianQueryResponse> {
        let url_ = this.baseUrl + "/api/v1/guardian?";
        if (key_name === undefined || key_name === null)
            throw new Error("The parameter 'key_name' must be defined and cannot be null.");
        else
            url_ += "key_name=" + encodeURIComponent("" + key_name) + "&";
        if (guardian_id === undefined || guardian_id === null)
            throw new Error("The parameter 'guardian_id' must be defined and cannot be null.");
        else
            url_ += "guardian_id=" + encodeURIComponent("" + guardian_id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGuardianGet(_response);
        });
    }

    protected processGuardianGet(response: Response): Promise<GuardianQueryResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GuardianQueryResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GuardianQueryResponse>(<any>null);
    }

    /**
     * Create Key Ceremony Guardian
     * @return Successful Response
     */
    guardianPut(body: KeyCeremonyGuardian): Promise<App__api__v1__models__base__BaseResponse> {
        let url_ = this.baseUrl + "/api/v1/guardian";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGuardianPut(_response);
        });
    }

    protected processGuardianPut(response: Response): Promise<App__api__v1__models__base__BaseResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = App__api__v1__models__base__BaseResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<App__api__v1__models__base__BaseResponse>(<any>null);
    }

    /**
     * Update Key Ceremony Guardian
     * @return Successful Response
     */
    guardianPost(body: KeyCeremonyGuardian): Promise<App__api__v1__models__base__BaseResponse> {
        let url_ = this.baseUrl + "/api/v1/guardian";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGuardianPost(_response);
        });
    }

    protected processGuardianPost(response: Response): Promise<App__api__v1__models__base__BaseResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = App__api__v1__models__base__BaseResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<App__api__v1__models__base__BaseResponse>(<any>null);
    }

    /**
     * Fetch Election
     * @return Successful Response
     */
    electionGet(election_id: string): Promise<ElectionQueryResponse> {
        let url_ = this.baseUrl + "/api/v1/election?";
        if (election_id === undefined || election_id === null)
            throw new Error("The parameter 'election_id' must be defined and cannot be null.");
        else
            url_ += "election_id=" + encodeURIComponent("" + election_id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processElectionGet(_response);
        });
    }

    protected processElectionGet(response: Response): Promise<ElectionQueryResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ElectionQueryResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ElectionQueryResponse>(<any>null);
    }

    /**
     * Create Election
     * @return Successful Response
     */
    electionPut(body: SubmitElectionRequest): Promise<App__api__v1__models__base__BaseResponse> {
        let url_ = this.baseUrl + "/api/v1/election";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processElectionPut(_response);
        });
    }

    protected processElectionPut(response: Response): Promise<App__api__v1__models__base__BaseResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = App__api__v1__models__base__BaseResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<App__api__v1__models__base__BaseResponse>(<any>null);
    }

    /**
     * Fetch Manifest
     * @return Successful Response
     */
    manifestGet(manifest_hash: string): Promise<ManifestQueryResponse> {
        let url_ = this.baseUrl + "/api/v1/manifest?";
        if (manifest_hash === undefined || manifest_hash === null)
            throw new Error("The parameter 'manifest_hash' must be defined and cannot be null.");
        else
            url_ += "manifest_hash=" + encodeURIComponent("" + manifest_hash) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processManifestGet(_response);
        });
    }

    protected processManifestGet(response: Response): Promise<ManifestQueryResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ManifestQueryResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ManifestQueryResponse>(<any>null);
    }

    /**
     * Submit Manifest
     * @return Successful Response
     */
    manifestPut(body: ValidateManifestRequest): Promise<ManifestSubmitResponse> {
        let url_ = this.baseUrl + "/api/v1/manifest";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processManifestPut(_response);
        });
    }

    protected processManifestPut(response: Response): Promise<ManifestSubmitResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 202) {
            return response.text().then((_responseText) => {
            let result202: any = null;
            let resultData202 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result202 = ManifestSubmitResponse.fromJS(resultData202);
            return result202;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ManifestSubmitResponse>(<any>null);
    }

    /**
     * Fetch Ballot
     * @return Successful Response
     */
    ballot(election_id: string, ballot_id: string): Promise<BallotQueryResponse> {
        let url_ = this.baseUrl + "/api/v1/ballot?";
        if (election_id === undefined || election_id === null)
            throw new Error("The parameter 'election_id' must be defined and cannot be null.");
        else
            url_ += "election_id=" + encodeURIComponent("" + election_id) + "&";
        if (ballot_id === undefined || ballot_id === null)
            throw new Error("The parameter 'ballot_id' must be defined and cannot be null.");
        else
            url_ += "ballot_id=" + encodeURIComponent("" + ballot_id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBallot(_response);
        });
    }

    protected processBallot(response: Response): Promise<BallotQueryResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BallotQueryResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BallotQueryResponse>(<any>null);
    }

    /**
     * Fetch Ciphertext Tally
     * @return Successful Response
     */
    tallyGet(election_id: string, tally_name: string): Promise<CiphertextTally> {
        let url_ = this.baseUrl + "/api/v1/tally?";
        if (election_id === undefined || election_id === null)
            throw new Error("The parameter 'election_id' must be defined and cannot be null.");
        else
            url_ += "election_id=" + encodeURIComponent("" + election_id) + "&";
        if (tally_name === undefined || tally_name === null)
            throw new Error("The parameter 'tally_name' must be defined and cannot be null.");
        else
            url_ += "tally_name=" + encodeURIComponent("" + tally_name) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTallyGet(_response);
        });
    }

    protected processTallyGet(response: Response): Promise<CiphertextTally> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CiphertextTally.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CiphertextTally>(<any>null);
    }

    /**
     * Tally Ballots
     * @return Successful Response
     */
    tallyPost(election_id: string, tally_name: string): Promise<CiphertextTally> {
        let url_ = this.baseUrl + "/api/v1/tally?";
        if (election_id === undefined || election_id === null)
            throw new Error("The parameter 'election_id' must be defined and cannot be null.");
        else
            url_ += "election_id=" + encodeURIComponent("" + election_id) + "&";
        if (tally_name === undefined || tally_name === null)
            throw new Error("The parameter 'tally_name' must be defined and cannot be null.");
        else
            url_ += "tally_name=" + encodeURIComponent("" + tally_name) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processTallyPost(_response);
        });
    }

    protected processTallyPost(response: Response): Promise<CiphertextTally> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CiphertextTally.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CiphertextTally>(<any>null);
    }

    /**
     * Ping
     * @return Successful Response
     */
    ping(): Promise<string> {
        let url_ = this.baseUrl + "/api/v1/ping";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPing(_response);
        });
    }

    protected processPing(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(<any>null);
    }
}

export class GuardianClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Find Key Ceremony Guardians
     * @param skip (optional) 
     * @param limit (optional) 
     * @return Successful Response
     */
    find(skip: number | undefined, limit: number | undefined, body: BaseQueryRequest): Promise<GuardianQueryResponse> {
        let url_ = this.baseUrl + "/api/v1/guardian/find?";
        if (skip === null)
            throw new Error("The parameter 'skip' cannot be null.");
        else if (skip !== undefined)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (limit === null)
            throw new Error("The parameter 'limit' cannot be null.");
        else if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processFind(_response);
        });
    }

    protected processFind(response: Response): Promise<GuardianQueryResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GuardianQueryResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GuardianQueryResponse>(<any>null);
    }

    /**
     * Announce Guardian
     * @return Successful Response
     */
    announce(body: GuardianAnnounceRequest): Promise<App__api__v1__models__base__BaseResponse> {
        let url_ = this.baseUrl + "/api/v1/key/guardian/announce";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAnnounce(_response);
        });
    }

    protected processAnnounce(response: Response): Promise<App__api__v1__models__base__BaseResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = App__api__v1__models__base__BaseResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<App__api__v1__models__base__BaseResponse>(<any>null);
    }

    /**
     * Share Backups
     * @return Successful Response
     */
    backup(body: GuardianSubmitBackupRequest): Promise<App__api__v1__models__base__BaseResponse> {
        let url_ = this.baseUrl + "/api/v1/key/guardian/backup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBackup(_response);
        });
    }

    protected processBackup(response: Response): Promise<App__api__v1__models__base__BaseResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = App__api__v1__models__base__BaseResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<App__api__v1__models__base__BaseResponse>(<any>null);
    }

    /**
     * Verify Backups
     * @return Successful Response
     */
    verify(body: GuardianSubmitVerificationRequest): Promise<App__api__v1__models__base__BaseResponse> {
        let url_ = this.baseUrl + "/api/v1/key/guardian/verify";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processVerify(_response);
        });
    }

    protected processVerify(response: Response): Promise<App__api__v1__models__base__BaseResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = App__api__v1__models__base__BaseResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<App__api__v1__models__base__BaseResponse>(<any>null);
    }

    /**
     * Challenge Backups
     * @return Successful Response
     */
    challenge(body: GuardianSubmitChallengeRequest): Promise<App__api__v1__models__base__BaseResponse> {
        let url_ = this.baseUrl + "/api/v1/key/guardian/challenge";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processChallenge(_response);
        });
    }

    protected processChallenge(response: Response): Promise<App__api__v1__models__base__BaseResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = App__api__v1__models__base__BaseResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<App__api__v1__models__base__BaseResponse>(<any>null);
    }
}

export class KeyClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Fetch Ceremony
     * @return Successful Response
     */
    ceremonyGet(key_name: string): Promise<KeyCeremonyQueryResponse> {
        let url_ = this.baseUrl + "/api/v1/key/ceremony?";
        if (key_name === undefined || key_name === null)
            throw new Error("The parameter 'key_name' must be defined and cannot be null.");
        else
            url_ += "key_name=" + encodeURIComponent("" + key_name) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCeremonyGet(_response);
        });
    }

    protected processCeremonyGet(response: Response): Promise<KeyCeremonyQueryResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = KeyCeremonyQueryResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<KeyCeremonyQueryResponse>(<any>null);
    }

    /**
     * Create Ceremony
     * @return Successful Response
     */
    ceremonyPut(body: KeyCeremonyCreateRequest): Promise<App__api__v1__models__base__BaseResponse> {
        let url_ = this.baseUrl + "/api/v1/key/ceremony";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCeremonyPut(_response);
        });
    }

    protected processCeremonyPut(response: Response): Promise<App__api__v1__models__base__BaseResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = App__api__v1__models__base__BaseResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<App__api__v1__models__base__BaseResponse>(<any>null);
    }
}

export class CeremonyClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Fetch Ceremony State
     * @return Successful Response
     */
    state(key_name: string): Promise<KeyCeremonyStateResponse> {
        let url_ = this.baseUrl + "/api/v1/key/ceremony/state?";
        if (key_name === undefined || key_name === null)
            throw new Error("The parameter 'key_name' must be defined and cannot be null.");
        else
            url_ += "key_name=" + encodeURIComponent("" + key_name) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processState(_response);
        });
    }

    protected processState(response: Response): Promise<KeyCeremonyStateResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = KeyCeremonyStateResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<KeyCeremonyStateResponse>(<any>null);
    }

    /**
     * Find Ceremonies
     * @param skip (optional) 
     * @param limit (optional) 
     * @return Successful Response
     */
    find(skip: number | undefined, limit: number | undefined, body: BaseQueryRequest): Promise<KeyCeremonyQueryResponse> {
        let url_ = this.baseUrl + "/api/v1/key/ceremony/find?";
        if (skip === null)
            throw new Error("The parameter 'skip' cannot be null.");
        else if (skip !== undefined)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (limit === null)
            throw new Error("The parameter 'limit' cannot be null.");
        else if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processFind(_response);
        });
    }

    protected processFind(response: Response): Promise<KeyCeremonyQueryResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = KeyCeremonyQueryResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<KeyCeremonyQueryResponse>(<any>null);
    }

    /**
     * Open Ceremony
     * @return Successful Response
     */
    open(key_name: string): Promise<App__api__v1__models__base__BaseResponse> {
        let url_ = this.baseUrl + "/api/v1/key/ceremony/open?";
        if (key_name === undefined || key_name === null)
            throw new Error("The parameter 'key_name' must be defined and cannot be null.");
        else
            url_ += "key_name=" + encodeURIComponent("" + key_name) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processOpen(_response);
        });
    }

    protected processOpen(response: Response): Promise<App__api__v1__models__base__BaseResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = App__api__v1__models__base__BaseResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<App__api__v1__models__base__BaseResponse>(<any>null);
    }

    /**
     * Close Ceremony
     * @return Successful Response
     */
    close(key_name: string): Promise<App__api__v1__models__base__BaseResponse> {
        let url_ = this.baseUrl + "/api/v1/key/ceremony/close?";
        if (key_name === undefined || key_name === null)
            throw new Error("The parameter 'key_name' must be defined and cannot be null.");
        else
            url_ += "key_name=" + encodeURIComponent("" + key_name) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processClose(_response);
        });
    }

    protected processClose(response: Response): Promise<App__api__v1__models__base__BaseResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = App__api__v1__models__base__BaseResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<App__api__v1__models__base__BaseResponse>(<any>null);
    }

    /**
     * Challenge Ceremony
     * @return Successful Response
     */
    challenge(key_name: string): Promise<App__api__v1__models__base__BaseResponse> {
        let url_ = this.baseUrl + "/api/v1/key/ceremony/challenge?";
        if (key_name === undefined || key_name === null)
            throw new Error("The parameter 'key_name' must be defined and cannot be null.");
        else
            url_ += "key_name=" + encodeURIComponent("" + key_name) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processChallenge(_response);
        });
    }

    protected processChallenge(response: Response): Promise<App__api__v1__models__base__BaseResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = App__api__v1__models__base__BaseResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<App__api__v1__models__base__BaseResponse>(<any>null);
    }

    /**
     * Cancel Ceremony
     * @return Successful Response
     */
    cancel(key_name: string): Promise<App__api__v1__models__base__BaseResponse> {
        let url_ = this.baseUrl + "/api/v1/key/ceremony/cancel?";
        if (key_name === undefined || key_name === null)
            throw new Error("The parameter 'key_name' must be defined and cannot be null.");
        else
            url_ += "key_name=" + encodeURIComponent("" + key_name) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCancel(_response);
        });
    }

    protected processCancel(response: Response): Promise<App__api__v1__models__base__BaseResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = App__api__v1__models__base__BaseResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<App__api__v1__models__base__BaseResponse>(<any>null);
    }

    /**
     * Fetch Joint Key
     * @return Successful Response
     */
    joint_key(key_name: string): Promise<ElectionJointKeyResponse> {
        let url_ = this.baseUrl + "/api/v1/key/ceremony/joint_key?";
        if (key_name === undefined || key_name === null)
            throw new Error("The parameter 'key_name' must be defined and cannot be null.");
        else
            url_ += "key_name=" + encodeURIComponent("" + key_name) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processJoint_key(_response);
        });
    }

    protected processJoint_key(response: Response): Promise<ElectionJointKeyResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ElectionJointKeyResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ElectionJointKeyResponse>(<any>null);
    }

    /**
     * Combine Election Keys
     * @return Successful Response
     */
    combine(body: PublishElectionJointKeyRequest): Promise<ElectionJointKeyResponse> {
        let url_ = this.baseUrl + "/api/v1/key/ceremony/combine";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCombine(_response);
        });
    }

    protected processCombine(response: Response): Promise<ElectionJointKeyResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ElectionJointKeyResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ElectionJointKeyResponse>(<any>null);
    }

    /**
     * Publish Joint Key
     * @return Successful Response
     */
    publish(key_name: string): Promise<ElectionJointKeyResponse> {
        let url_ = this.baseUrl + "/api/v1/key/ceremony/publish?";
        if (key_name === undefined || key_name === null)
            throw new Error("The parameter 'key_name' must be defined and cannot be null.");
        else
            url_ += "key_name=" + encodeURIComponent("" + key_name) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPublish(_response);
        });
    }

    protected processPublish(response: Response): Promise<ElectionJointKeyResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ElectionJointKeyResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ElectionJointKeyResponse>(<any>null);
    }
}

export class ChallengeClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Verify Ceremony Challenges
     * @return Successful Response
     */
    verify(key_name: string): Promise<App__api__v1__models__base__BaseResponse> {
        let url_ = this.baseUrl + "/api/v1/key/ceremony/challenge/verify?";
        if (key_name === undefined || key_name === null)
            throw new Error("The parameter 'key_name' must be defined and cannot be null.");
        else
            url_ += "key_name=" + encodeURIComponent("" + key_name) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processVerify(_response);
        });
    }

    protected processVerify(response: Response): Promise<App__api__v1__models__base__BaseResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = App__api__v1__models__base__BaseResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<App__api__v1__models__base__BaseResponse>(<any>null);
    }
}

export class ElectionClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get Election Constants
     * @return Successful Response
     */
    constants(): Promise<any> {
        let url_ = this.baseUrl + "/api/v1/election/constants";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processConstants(_response);
        });
    }

    protected processConstants(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * Find Elections
     * @param skip (optional) 
     * @param limit (optional) 
     * @return Successful Response
     */
    find(skip: number | undefined, limit: number | undefined, body: ElectionQueryRequest): Promise<ElectionQueryResponse> {
        let url_ = this.baseUrl + "/api/v1/election/find?";
        if (skip === null)
            throw new Error("The parameter 'skip' cannot be null.");
        else if (skip !== undefined)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (limit === null)
            throw new Error("The parameter 'limit' cannot be null.");
        else if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processFind(_response);
        });
    }

    protected processFind(response: Response): Promise<ElectionQueryResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ElectionQueryResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ElectionQueryResponse>(<any>null);
    }

    /**
     * Open Election
     * @return Successful Response
     */
    open(election_id: string): Promise<App__api__v1__models__base__BaseResponse> {
        let url_ = this.baseUrl + "/api/v1/election/open?";
        if (election_id === undefined || election_id === null)
            throw new Error("The parameter 'election_id' must be defined and cannot be null.");
        else
            url_ += "election_id=" + encodeURIComponent("" + election_id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processOpen(_response);
        });
    }

    protected processOpen(response: Response): Promise<App__api__v1__models__base__BaseResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = App__api__v1__models__base__BaseResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<App__api__v1__models__base__BaseResponse>(<any>null);
    }

    /**
     * Close Election
     * @return Successful Response
     */
    close(election_id: string): Promise<App__api__v1__models__base__BaseResponse> {
        let url_ = this.baseUrl + "/api/v1/election/close?";
        if (election_id === undefined || election_id === null)
            throw new Error("The parameter 'election_id' must be defined and cannot be null.");
        else
            url_ += "election_id=" + encodeURIComponent("" + election_id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processClose(_response);
        });
    }

    protected processClose(response: Response): Promise<App__api__v1__models__base__BaseResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = App__api__v1__models__base__BaseResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<App__api__v1__models__base__BaseResponse>(<any>null);
    }

    /**
     * Publish Election
     * @return Successful Response
     */
    publish(election_id: string): Promise<App__api__v1__models__base__BaseResponse> {
        let url_ = this.baseUrl + "/api/v1/election/publish?";
        if (election_id === undefined || election_id === null)
            throw new Error("The parameter 'election_id' must be defined and cannot be null.");
        else
            url_ += "election_id=" + encodeURIComponent("" + election_id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPublish(_response);
        });
    }

    protected processPublish(response: Response): Promise<App__api__v1__models__base__BaseResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = App__api__v1__models__base__BaseResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<App__api__v1__models__base__BaseResponse>(<any>null);
    }

    /**
     * Build Election Context
     * @return Successful Response
     */
    context(body: MakeElectionContextRequest): Promise<MakeElectionContextResponse> {
        let url_ = this.baseUrl + "/api/v1/election/context";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processContext(_response);
        });
    }

    protected processContext(response: Response): Promise<MakeElectionContextResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MakeElectionContextResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<MakeElectionContextResponse>(<any>null);
    }
}

export class ManifestClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Find Manifests
     * @param skip (optional) 
     * @param limit (optional) 
     * @return Successful Response
     */
    find(skip: number | undefined, limit: number | undefined, body: BaseQueryRequest): Promise<ManifestQueryResponse> {
        let url_ = this.baseUrl + "/api/v1/manifest/find?";
        if (skip === null)
            throw new Error("The parameter 'skip' cannot be null.");
        else if (skip !== undefined)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (limit === null)
            throw new Error("The parameter 'limit' cannot be null.");
        else if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processFind(_response);
        });
    }

    protected processFind(response: Response): Promise<ManifestQueryResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ManifestQueryResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ManifestQueryResponse>(<any>null);
    }

    /**
     * Validate Manifest
     * @return Successful Response
     */
    validate(body: ValidateManifestRequest): Promise<ValidateManifestResponse> {
        let url_ = this.baseUrl + "/api/v1/manifest/validate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processValidate(_response);
        });
    }

    protected processValidate(response: Response): Promise<ValidateManifestResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ValidateManifestResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ValidateManifestResponse>(<any>null);
    }
}

export class BallotClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Fetch Ballot Inventory
     * @return Successful Response
     */
    inventory(election_id: string): Promise<BallotInventoryResponse> {
        let url_ = this.baseUrl + "/api/v1/ballot/inventory?";
        if (election_id === undefined || election_id === null)
            throw new Error("The parameter 'election_id' must be defined and cannot be null.");
        else
            url_ += "election_id=" + encodeURIComponent("" + election_id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInventory(_response);
        });
    }

    protected processInventory(response: Response): Promise<BallotInventoryResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BallotInventoryResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BallotInventoryResponse>(<any>null);
    }

    /**
     * Find Ballots
     * @param skip (optional) 
     * @param limit (optional) 
     * @return Successful Response
     */
    find(election_id: string, skip: number | undefined, limit: number | undefined, body: BaseQueryRequest): Promise<BallotQueryResponse> {
        let url_ = this.baseUrl + "/api/v1/ballot/find?";
        if (election_id === undefined || election_id === null)
            throw new Error("The parameter 'election_id' must be defined and cannot be null.");
        else
            url_ += "election_id=" + encodeURIComponent("" + election_id) + "&";
        if (skip === null)
            throw new Error("The parameter 'skip' cannot be null.");
        else if (skip !== undefined)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (limit === null)
            throw new Error("The parameter 'limit' cannot be null.");
        else if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processFind(_response);
        });
    }

    protected processFind(response: Response): Promise<BallotQueryResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BallotQueryResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BallotQueryResponse>(<any>null);
    }

    /**
     * Cast Ballots
     * @param election_id (optional) 
     * @return Successful Response
     */
    cast(election_id: string | undefined, body: CastBallotsRequest): Promise<App__api__v1__models__base__BaseResponse> {
        let url_ = this.baseUrl + "/api/v1/ballot/cast?";
        if (election_id === null)
            throw new Error("The parameter 'election_id' cannot be null.");
        else if (election_id !== undefined)
            url_ += "election_id=" + encodeURIComponent("" + election_id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCast(_response);
        });
    }

    protected processCast(response: Response): Promise<App__api__v1__models__base__BaseResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 202) {
            return response.text().then((_responseText) => {
            let result202: any = null;
            let resultData202 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result202 = App__api__v1__models__base__BaseResponse.fromJS(resultData202);
            return result202;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<App__api__v1__models__base__BaseResponse>(<any>null);
    }

    /**
     * Spoil Ballots
     * @param election_id (optional) 
     * @return Successful Response
     */
    spoil(election_id: string | undefined, body: SpoilBallotsRequest): Promise<App__api__v1__models__base__BaseResponse> {
        let url_ = this.baseUrl + "/api/v1/ballot/spoil?";
        if (election_id === null)
            throw new Error("The parameter 'election_id' cannot be null.");
        else if (election_id !== undefined)
            url_ += "election_id=" + encodeURIComponent("" + election_id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSpoil(_response);
        });
    }

    protected processSpoil(response: Response): Promise<App__api__v1__models__base__BaseResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 202) {
            return response.text().then((_responseText) => {
            let result202: any = null;
            let resultData202 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result202 = App__api__v1__models__base__BaseResponse.fromJS(resultData202);
            return result202;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<App__api__v1__models__base__BaseResponse>(<any>null);
    }

    /**
     * Submit Ballots
     * @param election_id (optional) 
     * @return Successful Response
     */
    submit(election_id: string | undefined, body: SubmitBallotsRequest): Promise<App__api__v1__models__base__BaseResponse> {
        let url_ = this.baseUrl + "/api/v1/ballot/submit?";
        if (election_id === null)
            throw new Error("The parameter 'election_id' cannot be null.");
        else if (election_id !== undefined)
            url_ += "election_id=" + encodeURIComponent("" + election_id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSubmit(_response);
        });
    }

    protected processSubmit(response: Response): Promise<App__api__v1__models__base__BaseResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 202) {
            return response.text().then((_responseText) => {
            let result202: any = null;
            let resultData202 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result202 = App__api__v1__models__base__BaseResponse.fromJS(resultData202);
            return result202;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<App__api__v1__models__base__BaseResponse>(<any>null);
    }

    /**
     * Validate Ballot
     * @return Successful Response
     */
    validate(body: ValidateBallotRequest): Promise<App__api__v1__models__base__BaseResponse> {
        let url_ = this.baseUrl + "/api/v1/ballot/validate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processValidate(_response);
        });
    }

    protected processValidate(response: Response): Promise<App__api__v1__models__base__BaseResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = App__api__v1__models__base__BaseResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<App__api__v1__models__base__BaseResponse>(<any>null);
    }

    /**
     * Decrypt Ballots
     * @return Successful Response
     */
    decrypt(body: DecryptBallotsWithSharesRequest): Promise<any> {
        let url_ = this.baseUrl + "/api/v1/ballot/decrypt";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDecrypt(_response);
        });
    }

    protected processDecrypt(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }

    /**
     * Encrypt Ballots
     * @return Successful Response
     */
    encrypt(body: EncryptBallotsRequest): Promise<any> {
        let url_ = this.baseUrl + "/api/v1/ballot/encrypt";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processEncrypt(_response);
        });
    }

    protected processEncrypt(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }
}

export class TestClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Test Submit Ballot
     * @return Successful Response
     */
    submit_queue(body: SubmitBallotsRequest): Promise<any> {
        let url_ = this.baseUrl + "/api/v1/ballot/test/submit_queue";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSubmit_queue(_response);
        });
    }

    protected processSubmit_queue(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 202) {
            return response.text().then((_responseText) => {
            let result202: any = null;
            let resultData202 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result202 = resultData202 !== undefined ? resultData202 : <any>null;
    
            return result202;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(<any>null);
    }
}

export class TallyClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Find Ciphertext Tallies
     * @param skip (optional) 
     * @param limit (optional) 
     * @return Successful Response
     */
    find(election_id: string, skip: number | undefined, limit: number | undefined, body: BaseQueryRequest): Promise<CiphertextTallyQueryResponse> {
        let url_ = this.baseUrl + "/api/v1/tally/find?";
        if (election_id === undefined || election_id === null)
            throw new Error("The parameter 'election_id' must be defined and cannot be null.");
        else
            url_ += "election_id=" + encodeURIComponent("" + election_id) + "&";
        if (skip === null)
            throw new Error("The parameter 'skip' cannot be null.");
        else if (skip !== undefined)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (limit === null)
            throw new Error("The parameter 'limit' cannot be null.");
        else if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processFind(_response);
        });
    }

    protected processFind(response: Response): Promise<CiphertextTallyQueryResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CiphertextTallyQueryResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CiphertextTallyQueryResponse>(<any>null);
    }

    /**
     * Fetch Decryption Share
     * @return Successful Response
     */
    decryptGet(election_id: string, tally_name: string, guardian_id: string): Promise<DecryptionShareResponse> {
        let url_ = this.baseUrl + "/api/v1/tally/decrypt?";
        if (election_id === undefined || election_id === null)
            throw new Error("The parameter 'election_id' must be defined and cannot be null.");
        else
            url_ += "election_id=" + encodeURIComponent("" + election_id) + "&";
        if (tally_name === undefined || tally_name === null)
            throw new Error("The parameter 'tally_name' must be defined and cannot be null.");
        else
            url_ += "tally_name=" + encodeURIComponent("" + tally_name) + "&";
        if (guardian_id === undefined || guardian_id === null)
            throw new Error("The parameter 'guardian_id' must be defined and cannot be null.");
        else
            url_ += "guardian_id=" + encodeURIComponent("" + guardian_id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDecryptGet(_response);
        });
    }

    protected processDecryptGet(response: Response): Promise<DecryptionShareResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DecryptionShareResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DecryptionShareResponse>(<any>null);
    }

    /**
     * Decrypt Tally
     * @param restart (optional) 
     * @return Successful Response
     */
    decryptPost(restart: boolean | undefined, body: DecryptTallyRequest): Promise<PlaintextTallyQueryResponse> {
        let url_ = this.baseUrl + "/api/v1/tally/decrypt?";
        if (restart === null)
            throw new Error("The parameter 'restart' cannot be null.");
        else if (restart !== undefined)
            url_ += "restart=" + encodeURIComponent("" + restart) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDecryptPost(_response);
        });
    }

    protected processDecryptPost(response: Response): Promise<PlaintextTallyQueryResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PlaintextTallyQueryResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PlaintextTallyQueryResponse>(<any>null);
    }
}

export class DecryptClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Submit Share
     * @return Successful Response
     */
    submitShare(body: DecryptionShareRequest): Promise<App__api__v1__models__base__BaseResponse> {
        let url_ = this.baseUrl + "/api/v1/tally/decrypt/submit-share";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSubmitShare(_response);
        });
    }

    protected processSubmitShare(response: Response): Promise<App__api__v1__models__base__BaseResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = App__api__v1__models__base__BaseResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<App__api__v1__models__base__BaseResponse>(<any>null);
    }

    /**
     * Find Decryption Shares
     * @param skip (optional) 
     * @param limit (optional) 
     * @return Successful Response
     */
    find(tally_name: string, skip: number | undefined, limit: number | undefined, body: BaseQueryRequest): Promise<DecryptionShareResponse> {
        let url_ = this.baseUrl + "/api/v1/tally/decrypt/find?";
        if (tally_name === undefined || tally_name === null)
            throw new Error("The parameter 'tally_name' must be defined and cannot be null.");
        else
            url_ += "tally_name=" + encodeURIComponent("" + tally_name) + "&";
        if (skip === null)
            throw new Error("The parameter 'skip' cannot be null.");
        else if (skip !== undefined)
            url_ += "skip=" + encodeURIComponent("" + skip) + "&";
        if (limit === null)
            throw new Error("The parameter 'limit' cannot be null.");
        else if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processFind(_response);
        });
    }

    protected processFind(response: Response): Promise<DecryptionShareResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DecryptionShareResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DecryptionShareResponse>(<any>null);
    }
}

export class V1_1Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Create Election
     * @return Successful Response
     */
    election(body: CreateElectionRequest): Promise<App__api__v1_1__models__base__BaseResponse> {
        let url_ = this.baseUrl + "/api/v1_1/election";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processElection(_response);
        });
    }

    protected processElection(response: Response): Promise<App__api__v1_1__models__base__BaseResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = App__api__v1_1__models__base__BaseResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 422) {
            return response.text().then((_responseText) => {
            let result422: any = null;
            let resultData422 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result422 = HTTPValidationError.fromJS(resultData422);
            return throwException("Validation Error", status, _responseText, _headers, result422);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<App__api__v1_1__models__base__BaseResponse>(<any>null);
    }

    /**
     * Ping
     * @return Successful Response
     */
    ping(): Promise<string> {
        let url_ = this.baseUrl + "/api/v1_1/ping";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPing(_response);
        });
    }

    protected processPing(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(<any>null);
    }
}

/** An enumeration. */
export enum ApiMode {
    Guardian = "guardian",
    Mediator = "mediator",
}

/** The Ballot Inventory retains metadata about ballots in an election, including mappings of ballot tracking codes to ballot id's */
export class BallotInventory implements IBallotInventory {
    election_id!: string;
    cast_ballot_count?: number;
    spoiled_ballot_count?: number;
    cast_ballots?: { [key: string]: string; };
    spoiled_ballots?: { [key: string]: string; };

    constructor(data?: IBallotInventory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.cast_ballot_count = 0;
            this.spoiled_ballot_count = 0;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.election_id = _data["election_id"];
            this.cast_ballot_count = _data["cast_ballot_count"] !== undefined ? _data["cast_ballot_count"] : 0;
            this.spoiled_ballot_count = _data["spoiled_ballot_count"] !== undefined ? _data["spoiled_ballot_count"] : 0;
            if (_data["cast_ballots"]) {
                this.cast_ballots = {} as any;
                for (let key in _data["cast_ballots"]) {
                    if (_data["cast_ballots"].hasOwnProperty(key))
                        (<any>this.cast_ballots)![key] = _data["cast_ballots"][key];
                }
            }
            if (_data["spoiled_ballots"]) {
                this.spoiled_ballots = {} as any;
                for (let key in _data["spoiled_ballots"]) {
                    if (_data["spoiled_ballots"].hasOwnProperty(key))
                        (<any>this.spoiled_ballots)![key] = _data["spoiled_ballots"][key];
                }
            }
        }
    }

    static fromJS(data: any): BallotInventory {
        data = typeof data === 'object' ? data : {};
        let result = new BallotInventory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["election_id"] = this.election_id;
        data["cast_ballot_count"] = this.cast_ballot_count;
        data["spoiled_ballot_count"] = this.spoiled_ballot_count;
        if (this.cast_ballots) {
            data["cast_ballots"] = {};
            for (let key in this.cast_ballots) {
                if (this.cast_ballots.hasOwnProperty(key))
                    (<any>data["cast_ballots"])[key] = this.cast_ballots[key];
            }
        }
        if (this.spoiled_ballots) {
            data["spoiled_ballots"] = {};
            for (let key in this.spoiled_ballots) {
                if (this.spoiled_ballots.hasOwnProperty(key))
                    (<any>data["spoiled_ballots"])[key] = this.spoiled_ballots[key];
            }
        }
        return data;
    }
}

/** The Ballot Inventory retains metadata about ballots in an election, including mappings of ballot tracking codes to ballot id's */
export interface IBallotInventory {
    election_id: string;
    cast_ballot_count?: number;
    spoiled_ballot_count?: number;
    cast_ballots?: { [key: string]: string; };
    spoiled_ballots?: { [key: string]: string; };
}

/** A basic response */
export class BallotInventoryResponse implements IBallotInventoryResponse {
    status?: App__api__v1__models__base__ResponseStatus;
    message?: string;
    inventory!: BallotInventory;

    constructor(data?: IBallotInventoryResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.status = App__api__v1__models__base__ResponseStatus.Success;
            this.inventory = new BallotInventory();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.status = _data["status"] !== undefined ? _data["status"] : App__api__v1__models__base__ResponseStatus.Success;
            this.message = _data["message"];
            this.inventory = _data["inventory"] ? BallotInventory.fromJS(_data["inventory"]) : new BallotInventory();
        }
    }

    static fromJS(data: any): BallotInventoryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BallotInventoryResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status;
        data["message"] = this.message;
        data["inventory"] = this.inventory ? this.inventory.toJSON() : <any>undefined;
        return data;
    }
}

/** A basic response */
export interface IBallotInventoryResponse {
    status?: App__api__v1__models__base__ResponseStatus;
    message?: string;
    inventory: BallotInventory;
}

/** A basic response */
export class BallotQueryResponse implements IBallotQueryResponse {
    status?: App__api__v1__models__base__ResponseStatus;
    message?: string;
    election_id!: string;
    ballots?: any[];

    constructor(data?: IBallotQueryResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.status = App__api__v1__models__base__ResponseStatus.Success;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.status = _data["status"] !== undefined ? _data["status"] : App__api__v1__models__base__ResponseStatus.Success;
            this.message = _data["message"];
            this.election_id = _data["election_id"];
            if (Array.isArray(_data["ballots"])) {
                this.ballots = [] as any;
                for (let item of _data["ballots"])
                    this.ballots!.push(item);
            }
        }
    }

    static fromJS(data: any): BallotQueryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BallotQueryResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status;
        data["message"] = this.message;
        data["election_id"] = this.election_id;
        if (Array.isArray(this.ballots)) {
            data["ballots"] = [];
            for (let item of this.ballots)
                data["ballots"].push(item);
        }
        return data;
    }
}

/** A basic response */
export interface IBallotQueryResponse {
    status?: App__api__v1__models__base__ResponseStatus;
    message?: string;
    election_id: string;
    ballots?: any[];
}

/** Find something */
export class BaseQueryRequest implements IBaseQueryRequest {
    filter?: any;

    constructor(data?: IBaseQueryRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.filter = _data["filter"];
        }
    }

    static fromJS(data: any): BaseQueryRequest {
        data = typeof data === 'object' ? data : {};
        let result = new BaseQueryRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["filter"] = this.filter;
        return data;
    }
}

/** Find something */
export interface IBaseQueryRequest {
    filter?: any;
}

export class Body_create_user_api_v1_user_create_post implements IBody_create_user_api_v1_user_create_post {
    user_info!: UserInfo;
    settings?: Settings;

    constructor(data?: IBody_create_user_api_v1_user_create_post) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.user_info = new UserInfo();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.user_info = _data["user_info"] ? UserInfo.fromJS(_data["user_info"]) : new UserInfo();
            this.settings = _data["settings"] ? Settings.fromJS(_data["settings"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Body_create_user_api_v1_user_create_post {
        data = typeof data === 'object' ? data : {};
        let result = new Body_create_user_api_v1_user_create_post();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["user_info"] = this.user_info ? this.user_info.toJSON() : <any>undefined;
        data["settings"] = this.settings ? this.settings.toJSON() : <any>undefined;
        return data;
    }
}

export interface IBody_create_user_api_v1_user_create_post {
    user_info: UserInfo;
    settings?: Settings;
}

export class Body_login_for_access_token_api_v1_auth_login_post implements IBody_login_for_access_token_api_v1_auth_login_post {
    grant_type?: string;
    username!: string;
    password!: string;
    scope?: string;
    client_id?: string;
    client_secret?: string;

    constructor(data?: IBody_login_for_access_token_api_v1_auth_login_post) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.scope = "";
        }
    }

    init(_data?: any) {
        if (_data) {
            this.grant_type = _data["grant_type"];
            this.username = _data["username"];
            this.password = _data["password"];
            this.scope = _data["scope"] !== undefined ? _data["scope"] : "";
            this.client_id = _data["client_id"];
            this.client_secret = _data["client_secret"];
        }
    }

    static fromJS(data: any): Body_login_for_access_token_api_v1_auth_login_post {
        data = typeof data === 'object' ? data : {};
        let result = new Body_login_for_access_token_api_v1_auth_login_post();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["grant_type"] = this.grant_type;
        data["username"] = this.username;
        data["password"] = this.password;
        data["scope"] = this.scope;
        data["client_id"] = this.client_id;
        data["client_secret"] = this.client_secret;
        return data;
    }
}

export interface IBody_login_for_access_token_api_v1_auth_login_post {
    grant_type?: string;
    username: string;
    password: string;
    scope?: string;
    client_id?: string;
    client_secret?: string;
}

/** Cast the enclosed ballots. */
export class CastBallotsRequest implements ICastBallotsRequest {
    election_id?: string;
    manifest?: any;
    context?: any;
    ballots!: any[];

    constructor(data?: ICastBallotsRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.ballots = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.election_id = _data["election_id"];
            this.manifest = _data["manifest"];
            this.context = _data["context"];
            if (Array.isArray(_data["ballots"])) {
                this.ballots = [] as any;
                for (let item of _data["ballots"])
                    this.ballots!.push(item);
            }
        }
    }

    static fromJS(data: any): CastBallotsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CastBallotsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["election_id"] = this.election_id;
        data["manifest"] = this.manifest;
        data["context"] = this.context;
        if (Array.isArray(this.ballots)) {
            data["ballots"] = [];
            for (let item of this.ballots)
                data["ballots"].push(item);
        }
        return data;
    }
}

/** Cast the enclosed ballots. */
export interface ICastBallotsRequest {
    election_id?: string;
    manifest?: any;
    context?: any;
    ballots: any[];
}

/** A Tally for a specific election. */
export class CiphertextTally implements ICiphertextTally {
    election_id!: string;
    tally_name!: string;
    created!: Date;
    tally?: any;

    constructor(data?: ICiphertextTally) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.election_id = _data["election_id"];
            this.tally_name = _data["tally_name"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.tally = _data["tally"];
        }
    }

    static fromJS(data: any): CiphertextTally {
        data = typeof data === 'object' ? data : {};
        let result = new CiphertextTally();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["election_id"] = this.election_id;
        data["tally_name"] = this.tally_name;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["tally"] = this.tally;
        return data;
    }
}

/** A Tally for a specific election. */
export interface ICiphertextTally {
    election_id: string;
    tally_name: string;
    created: Date;
    tally?: any;
}

/** A DecryptionShare provided by a guardian for a specific tally. Optionally can include ballot_shares for challenge ballots. */
export class CiphertextTallyDecryptionShare implements ICiphertextTallyDecryptionShare {
    election_id!: string;
    tally_name!: string;
    guardian_id!: string;
    tally_share?: any;
    ballot_shares?: any;

    constructor(data?: ICiphertextTallyDecryptionShare) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.election_id = _data["election_id"];
            this.tally_name = _data["tally_name"];
            this.guardian_id = _data["guardian_id"];
            this.tally_share = _data["tally_share"];
            this.ballot_shares = _data["ballot_shares"];
        }
    }

    static fromJS(data: any): CiphertextTallyDecryptionShare {
        data = typeof data === 'object' ? data : {};
        let result = new CiphertextTallyDecryptionShare();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["election_id"] = this.election_id;
        data["tally_name"] = this.tally_name;
        data["guardian_id"] = this.guardian_id;
        data["tally_share"] = this.tally_share;
        data["ballot_shares"] = this.ballot_shares;
        return data;
    }
}

/** A DecryptionShare provided by a guardian for a specific tally. Optionally can include ballot_shares for challenge ballots. */
export interface ICiphertextTallyDecryptionShare {
    election_id: string;
    tally_name: string;
    guardian_id: string;
    tally_share?: any;
    ballot_shares?: any;
}

/** A collection of Ciphertext Tallies. */
export class CiphertextTallyQueryResponse implements ICiphertextTallyQueryResponse {
    status?: App__api__v1__models__base__ResponseStatus;
    message?: string;
    tallies?: CiphertextTally[];

    constructor(data?: ICiphertextTallyQueryResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.status = App__api__v1__models__base__ResponseStatus.Success;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.status = _data["status"] !== undefined ? _data["status"] : App__api__v1__models__base__ResponseStatus.Success;
            this.message = _data["message"];
            if (Array.isArray(_data["tallies"])) {
                this.tallies = [] as any;
                for (let item of _data["tallies"])
                    this.tallies!.push(CiphertextTally.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CiphertextTallyQueryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CiphertextTallyQueryResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status;
        data["message"] = this.message;
        if (Array.isArray(this.tallies)) {
            data["tallies"] = [];
            for (let item of this.tallies)
                data["tallies"].push(item.toJSON());
        }
        return data;
    }
}

/** A collection of Ciphertext Tallies. */
export interface ICiphertextTallyQueryResponse {
    status?: App__api__v1__models__base__ResponseStatus;
    message?: string;
    tallies?: CiphertextTally[];
}

/** Create an election. */
export class CreateElectionRequest implements ICreateElectionRequest {
    name!: string;

    constructor(data?: ICreateElectionRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): CreateElectionRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateElectionRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }
}

/** Create an election. */
export interface ICreateElectionRequest {
    name: string;
}

/** Decrypt the provided ballots with the provided shares */
export class DecryptBallotsWithSharesRequest implements IDecryptBallotsWithSharesRequest {
    encrypted_ballots!: any[];
    shares!: { [key: string]: any[]; };
    context?: any;

    constructor(data?: IDecryptBallotsWithSharesRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.encrypted_ballots = [];
            this.shares = {};
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["encrypted_ballots"])) {
                this.encrypted_ballots = [] as any;
                for (let item of _data["encrypted_ballots"])
                    this.encrypted_ballots!.push(item);
            }
            if (_data["shares"]) {
                this.shares = {} as any;
                for (let key in _data["shares"]) {
                    if (_data["shares"].hasOwnProperty(key))
                        (<any>this.shares)![key] = _data["shares"][key] !== undefined ? _data["shares"][key] : [];
                }
            }
            this.context = _data["context"];
        }
    }

    static fromJS(data: any): DecryptBallotsWithSharesRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DecryptBallotsWithSharesRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.encrypted_ballots)) {
            data["encrypted_ballots"] = [];
            for (let item of this.encrypted_ballots)
                data["encrypted_ballots"].push(item);
        }
        if (this.shares) {
            data["shares"] = {};
            for (let key in this.shares) {
                if (this.shares.hasOwnProperty(key))
                    (<any>data["shares"])[key] = this.shares[key];
            }
        }
        data["context"] = this.context;
        return data;
    }
}

/** Decrypt the provided ballots with the provided shares */
export interface IDecryptBallotsWithSharesRequest {
    encrypted_ballots: any[];
    shares: { [key: string]: any[]; };
    context?: any;
}

/** A request to decrypt a specific tally.  Can optionally include the tally to decrypt. */
export class DecryptTallyRequest implements IDecryptTallyRequest {
    election_id!: string;
    tally_name!: string;

    constructor(data?: IDecryptTallyRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.election_id = _data["election_id"];
            this.tally_name = _data["tally_name"];
        }
    }

    static fromJS(data: any): DecryptTallyRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DecryptTallyRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["election_id"] = this.election_id;
        data["tally_name"] = this.tally_name;
        return data;
    }
}

/** A request to decrypt a specific tally.  Can optionally include the tally to decrypt. */
export interface IDecryptTallyRequest {
    election_id: string;
    tally_name: string;
}

/** A request to submit a decryption share. */
export class DecryptionShareRequest implements IDecryptionShareRequest {
    share!: CiphertextTallyDecryptionShare;

    constructor(data?: IDecryptionShareRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.share = new CiphertextTallyDecryptionShare();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.share = _data["share"] ? CiphertextTallyDecryptionShare.fromJS(_data["share"]) : new CiphertextTallyDecryptionShare();
        }
    }

    static fromJS(data: any): DecryptionShareRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DecryptionShareRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["share"] = this.share ? this.share.toJSON() : <any>undefined;
        return data;
    }
}

/** A request to submit a decryption share. */
export interface IDecryptionShareRequest {
    share: CiphertextTallyDecryptionShare;
}

/** A response that includes a collection of decryption shares. */
export class DecryptionShareResponse implements IDecryptionShareResponse {
    status?: App__api__v1__models__base__ResponseStatus;
    message?: string;
    shares!: CiphertextTallyDecryptionShare[];

    constructor(data?: IDecryptionShareResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.status = App__api__v1__models__base__ResponseStatus.Success;
            this.shares = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.status = _data["status"] !== undefined ? _data["status"] : App__api__v1__models__base__ResponseStatus.Success;
            this.message = _data["message"];
            if (Array.isArray(_data["shares"])) {
                this.shares = [] as any;
                for (let item of _data["shares"])
                    this.shares!.push(CiphertextTallyDecryptionShare.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DecryptionShareResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DecryptionShareResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status;
        data["message"] = this.message;
        if (Array.isArray(this.shares)) {
            data["shares"] = [];
            for (let item of this.shares)
                data["shares"].push(item.toJSON());
        }
        return data;
    }
}

/** A response that includes a collection of decryption shares. */
export interface IDecryptionShareResponse {
    status?: App__api__v1__models__base__ResponseStatus;
    message?: string;
    shares: CiphertextTallyDecryptionShare[];
}

/** An election object. */
export class Election implements IElection {
    election_id!: string;
    key_name!: string;
    state!: ElectionState;
    context?: any;
    manifest?: any;

    constructor(data?: IElection) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.election_id = _data["election_id"];
            this.key_name = _data["key_name"];
            this.state = _data["state"];
            this.context = _data["context"];
            this.manifest = _data["manifest"];
        }
    }

    static fromJS(data: any): Election {
        data = typeof data === 'object' ? data : {};
        let result = new Election();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["election_id"] = this.election_id;
        data["key_name"] = this.key_name;
        data["state"] = this.state;
        data["context"] = this.context;
        data["manifest"] = this.manifest;
        return data;
    }
}

/** An election object. */
export interface IElection {
    election_id: string;
    key_name: string;
    state: ElectionState;
    context?: any;
    manifest?: any;
}

/** Response object containing the Election Joint Key. */
export class ElectionJointKeyResponse implements IElectionJointKeyResponse {
    status?: App__api__v1__models__base__ResponseStatus;
    message?: string;
    elgamal_public_key?: any;
    commitment_hash?: any;

    constructor(data?: IElectionJointKeyResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.status = App__api__v1__models__base__ResponseStatus.Success;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.status = _data["status"] !== undefined ? _data["status"] : App__api__v1__models__base__ResponseStatus.Success;
            this.message = _data["message"];
            this.elgamal_public_key = _data["elgamal_public_key"];
            this.commitment_hash = _data["commitment_hash"];
        }
    }

    static fromJS(data: any): ElectionJointKeyResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ElectionJointKeyResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status;
        data["message"] = this.message;
        data["elgamal_public_key"] = this.elgamal_public_key;
        data["commitment_hash"] = this.commitment_hash;
        return data;
    }
}

/** Response object containing the Election Joint Key. */
export interface IElectionJointKeyResponse {
    status?: App__api__v1__models__base__ResponseStatus;
    message?: string;
    elgamal_public_key?: any;
    commitment_hash?: any;
}

/** A request for elections using the specified filter. */
export class ElectionQueryRequest implements IElectionQueryRequest {
    filter?: any;

    constructor(data?: IElectionQueryRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.filter = _data["filter"];
        }
    }

    static fromJS(data: any): ElectionQueryRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ElectionQueryRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["filter"] = this.filter;
        return data;
    }
}

/** A request for elections using the specified filter. */
export interface IElectionQueryRequest {
    filter?: any;
}

/** A collection of elections. */
export class ElectionQueryResponse implements IElectionQueryResponse {
    status?: App__api__v1__models__base__ResponseStatus;
    message?: string;
    elections?: Election[];

    constructor(data?: IElectionQueryResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.status = App__api__v1__models__base__ResponseStatus.Success;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.status = _data["status"] !== undefined ? _data["status"] : App__api__v1__models__base__ResponseStatus.Success;
            this.message = _data["message"];
            if (Array.isArray(_data["elections"])) {
                this.elections = [] as any;
                for (let item of _data["elections"])
                    this.elections!.push(Election.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ElectionQueryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ElectionQueryResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status;
        data["message"] = this.message;
        if (Array.isArray(this.elections)) {
            data["elections"] = [];
            for (let item of this.elections)
                data["elections"].push(item.toJSON());
        }
        return data;
    }
}

/** A collection of elections. */
export interface IElectionQueryResponse {
    status?: App__api__v1__models__base__ResponseStatus;
    message?: string;
    elections?: Election[];
}

/** An enumeration. */
export enum ElectionState {
    CREATED = "CREATED",
    OPEN = "OPEN",
    CLOSED = "CLOSED",
    PUBLISHED = "PUBLISHED",
}

/** A request to encrypt the enclosed ballots. */
export class EncryptBallotsRequest implements IEncryptBallotsRequest {
    election_id!: string;
    seed_hash!: string;
    ballots!: any[];

    constructor(data?: IEncryptBallotsRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.ballots = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.election_id = _data["election_id"];
            this.seed_hash = _data["seed_hash"];
            if (Array.isArray(_data["ballots"])) {
                this.ballots = [] as any;
                for (let item of _data["ballots"])
                    this.ballots!.push(item);
            }
        }
    }

    static fromJS(data: any): EncryptBallotsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EncryptBallotsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["election_id"] = this.election_id;
        data["seed_hash"] = this.seed_hash;
        if (Array.isArray(this.ballots)) {
            data["ballots"] = [];
            for (let item of this.ballots)
                data["ballots"].push(item);
        }
        return data;
    }
}

/** A request to encrypt the enclosed ballots. */
export interface IEncryptBallotsRequest {
    election_id: string;
    seed_hash: string;
    ballots: any[];
}

/** Returns error messages to the client. */
export class ErrorMessage implements IErrorMessage {
    message!: string;

    constructor(data?: IErrorMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): ErrorMessage {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        return data;
    }
}

/** Returns error messages to the client. */
export interface IErrorMessage {
    message: string;
}

/** A set of public auxiliary and election keys. */
export class GuardianAnnounceRequest implements IGuardianAnnounceRequest {
    key_name!: string;
    public_keys?: any;

    constructor(data?: IGuardianAnnounceRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key_name = _data["key_name"];
            this.public_keys = _data["public_keys"];
        }
    }

    static fromJS(data: any): GuardianAnnounceRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GuardianAnnounceRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key_name"] = this.key_name;
        data["public_keys"] = this.public_keys;
        return data;
    }
}

/** A set of public auxiliary and election keys. */
export interface IGuardianAnnounceRequest {
    key_name: string;
    public_keys?: any;
}

/** Returns a collection of KeyCeremonyGuardians. */
export class GuardianQueryResponse implements IGuardianQueryResponse {
    status?: App__api__v1__models__base__ResponseStatus;
    message?: string;
    guardians!: KeyCeremonyGuardian[];

    constructor(data?: IGuardianQueryResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.status = App__api__v1__models__base__ResponseStatus.Success;
            this.guardians = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.status = _data["status"] !== undefined ? _data["status"] : App__api__v1__models__base__ResponseStatus.Success;
            this.message = _data["message"];
            if (Array.isArray(_data["guardians"])) {
                this.guardians = [] as any;
                for (let item of _data["guardians"])
                    this.guardians!.push(KeyCeremonyGuardian.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GuardianQueryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GuardianQueryResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status;
        data["message"] = this.message;
        if (Array.isArray(this.guardians)) {
            data["guardians"] = [];
            for (let item of this.guardians)
                data["guardians"].push(item.toJSON());
        }
        return data;
    }
}

/** Returns a collection of KeyCeremonyGuardians. */
export interface IGuardianQueryResponse {
    status?: App__api__v1__models__base__ResponseStatus;
    message?: string;
    guardians: KeyCeremonyGuardian[];
}

/** Submit a collection of backups for a guardian. */
export class GuardianSubmitBackupRequest implements IGuardianSubmitBackupRequest {
    key_name!: string;
    guardian_id!: string;
    backups!: any[];

    constructor(data?: IGuardianSubmitBackupRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.backups = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key_name = _data["key_name"];
            this.guardian_id = _data["guardian_id"];
            if (Array.isArray(_data["backups"])) {
                this.backups = [] as any;
                for (let item of _data["backups"])
                    this.backups!.push(item);
            }
        }
    }

    static fromJS(data: any): GuardianSubmitBackupRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GuardianSubmitBackupRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key_name"] = this.key_name;
        data["guardian_id"] = this.guardian_id;
        if (Array.isArray(this.backups)) {
            data["backups"] = [];
            for (let item of this.backups)
                data["backups"].push(item);
        }
        return data;
    }
}

/** Submit a collection of backups for a guardian. */
export interface IGuardianSubmitBackupRequest {
    key_name: string;
    guardian_id: string;
    backups: any[];
}

/** Submit a collection of challenges for a guardian. */
export class GuardianSubmitChallengeRequest implements IGuardianSubmitChallengeRequest {
    key_name!: string;
    guardian_id!: string;
    challenges!: any[];

    constructor(data?: IGuardianSubmitChallengeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.challenges = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key_name = _data["key_name"];
            this.guardian_id = _data["guardian_id"];
            if (Array.isArray(_data["challenges"])) {
                this.challenges = [] as any;
                for (let item of _data["challenges"])
                    this.challenges!.push(item);
            }
        }
    }

    static fromJS(data: any): GuardianSubmitChallengeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GuardianSubmitChallengeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key_name"] = this.key_name;
        data["guardian_id"] = this.guardian_id;
        if (Array.isArray(this.challenges)) {
            data["challenges"] = [];
            for (let item of this.challenges)
                data["challenges"].push(item);
        }
        return data;
    }
}

/** Submit a collection of challenges for a guardian. */
export interface IGuardianSubmitChallengeRequest {
    key_name: string;
    guardian_id: string;
    challenges: any[];
}

/** Submit a collection of verifications for a guardian. */
export class GuardianSubmitVerificationRequest implements IGuardianSubmitVerificationRequest {
    key_name!: string;
    guardian_id!: string;
    verifications!: any[];

    constructor(data?: IGuardianSubmitVerificationRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.verifications = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key_name = _data["key_name"];
            this.guardian_id = _data["guardian_id"];
            if (Array.isArray(_data["verifications"])) {
                this.verifications = [] as any;
                for (let item of _data["verifications"])
                    this.verifications!.push(item);
            }
        }
    }

    static fromJS(data: any): GuardianSubmitVerificationRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GuardianSubmitVerificationRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key_name"] = this.key_name;
        data["guardian_id"] = this.guardian_id;
        if (Array.isArray(this.verifications)) {
            data["verifications"] = [];
            for (let item of this.verifications)
                data["verifications"].push(item);
        }
        return data;
    }
}

/** Submit a collection of verifications for a guardian. */
export interface IGuardianSubmitVerificationRequest {
    key_name: string;
    guardian_id: string;
    verifications: any[];
}

export class HTTPValidationError implements IHTTPValidationError {
    detail?: ValidationError[];

    constructor(data?: IHTTPValidationError) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["detail"])) {
                this.detail = [] as any;
                for (let item of _data["detail"])
                    this.detail!.push(ValidationError.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HTTPValidationError {
        data = typeof data === 'object' ? data : {};
        let result = new HTTPValidationError();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.detail)) {
            data["detail"] = [];
            for (let item of this.detail)
                data["detail"].push(item.toJSON());
        }
        return data;
    }
}

export interface IHTTPValidationError {
    detail?: ValidationError[];
}

/** The Key Ceremony is a record of the state of a key ceremony. */
export class KeyCeremony implements IKeyCeremony {
    key_name!: string;
    state!: KeyCeremonyState;
    number_of_guardians!: number;
    quorum!: number;
    guardian_ids!: string[];
    guardian_status!: { [key: string]: KeyCeremonyGuardianState; };
    elgamal_public_key?: any;
    commitment_hash?: any;

    constructor(data?: IKeyCeremony) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.guardian_ids = [];
            this.guardian_status = {};
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key_name = _data["key_name"];
            this.state = _data["state"];
            this.number_of_guardians = _data["number_of_guardians"];
            this.quorum = _data["quorum"];
            if (Array.isArray(_data["guardian_ids"])) {
                this.guardian_ids = [] as any;
                for (let item of _data["guardian_ids"])
                    this.guardian_ids!.push(item);
            }
            if (_data["guardian_status"]) {
                this.guardian_status = {} as any;
                for (let key in _data["guardian_status"]) {
                    if (_data["guardian_status"].hasOwnProperty(key))
                        (<any>this.guardian_status)![key] = _data["guardian_status"][key] ? KeyCeremonyGuardianState.fromJS(_data["guardian_status"][key]) : new KeyCeremonyGuardianState();
                }
            }
            this.elgamal_public_key = _data["elgamal_public_key"];
            this.commitment_hash = _data["commitment_hash"];
        }
    }

    static fromJS(data: any): KeyCeremony {
        data = typeof data === 'object' ? data : {};
        let result = new KeyCeremony();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key_name"] = this.key_name;
        data["state"] = this.state;
        data["number_of_guardians"] = this.number_of_guardians;
        data["quorum"] = this.quorum;
        if (Array.isArray(this.guardian_ids)) {
            data["guardian_ids"] = [];
            for (let item of this.guardian_ids)
                data["guardian_ids"].push(item);
        }
        if (this.guardian_status) {
            data["guardian_status"] = {};
            for (let key in this.guardian_status) {
                if (this.guardian_status.hasOwnProperty(key))
                    (<any>data["guardian_status"])[key] = this.guardian_status[key] ? this.guardian_status[key].toJSON() : <any>undefined;
            }
        }
        data["elgamal_public_key"] = this.elgamal_public_key;
        data["commitment_hash"] = this.commitment_hash;
        return data;
    }
}

/** The Key Ceremony is a record of the state of a key ceremony. */
export interface IKeyCeremony {
    key_name: string;
    state: KeyCeremonyState;
    number_of_guardians: number;
    quorum: number;
    guardian_ids: string[];
    guardian_status: { [key: string]: KeyCeremonyGuardianState; };
    elgamal_public_key?: any;
    commitment_hash?: any;
}

/** Request to create a new key ceremony. */
export class KeyCeremonyCreateRequest implements IKeyCeremonyCreateRequest {
    key_name!: string;
    number_of_guardians!: number;
    quorum!: number;
    guardian_ids!: string[];

    constructor(data?: IKeyCeremonyCreateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.guardian_ids = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key_name = _data["key_name"];
            this.number_of_guardians = _data["number_of_guardians"];
            this.quorum = _data["quorum"];
            if (Array.isArray(_data["guardian_ids"])) {
                this.guardian_ids = [] as any;
                for (let item of _data["guardian_ids"])
                    this.guardian_ids!.push(item);
            }
        }
    }

    static fromJS(data: any): KeyCeremonyCreateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new KeyCeremonyCreateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key_name"] = this.key_name;
        data["number_of_guardians"] = this.number_of_guardians;
        data["quorum"] = this.quorum;
        if (Array.isArray(this.guardian_ids)) {
            data["guardian_ids"] = [];
            for (let item of this.guardian_ids)
                data["guardian_ids"].push(item);
        }
        return data;
    }
}

/** Request to create a new key ceremony. */
export interface IKeyCeremonyCreateRequest {
    key_name: string;
    number_of_guardians: number;
    quorum: number;
    guardian_ids: string[];
}

/** A record of the public data exchanged between guardians. */
export class KeyCeremonyGuardian implements IKeyCeremonyGuardian {
    key_name!: string;
    guardian_id!: string;
    name!: string;
    sequence_order!: number;
    number_of_guardians!: number;
    quorum!: number;
    public_keys?: any;
    backups?: any[];
    verifications?: any[];
    challenges?: any[];

    constructor(data?: IKeyCeremonyGuardian) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key_name = _data["key_name"];
            this.guardian_id = _data["guardian_id"];
            this.name = _data["name"];
            this.sequence_order = _data["sequence_order"];
            this.number_of_guardians = _data["number_of_guardians"];
            this.quorum = _data["quorum"];
            this.public_keys = _data["public_keys"];
            if (Array.isArray(_data["backups"])) {
                this.backups = [] as any;
                for (let item of _data["backups"])
                    this.backups!.push(item);
            }
            if (Array.isArray(_data["verifications"])) {
                this.verifications = [] as any;
                for (let item of _data["verifications"])
                    this.verifications!.push(item);
            }
            if (Array.isArray(_data["challenges"])) {
                this.challenges = [] as any;
                for (let item of _data["challenges"])
                    this.challenges!.push(item);
            }
        }
    }

    static fromJS(data: any): KeyCeremonyGuardian {
        data = typeof data === 'object' ? data : {};
        let result = new KeyCeremonyGuardian();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key_name"] = this.key_name;
        data["guardian_id"] = this.guardian_id;
        data["name"] = this.name;
        data["sequence_order"] = this.sequence_order;
        data["number_of_guardians"] = this.number_of_guardians;
        data["quorum"] = this.quorum;
        data["public_keys"] = this.public_keys;
        if (Array.isArray(this.backups)) {
            data["backups"] = [];
            for (let item of this.backups)
                data["backups"].push(item);
        }
        if (Array.isArray(this.verifications)) {
            data["verifications"] = [];
            for (let item of this.verifications)
                data["verifications"].push(item);
        }
        if (Array.isArray(this.challenges)) {
            data["challenges"] = [];
            for (let item of this.challenges)
                data["challenges"].push(item);
        }
        return data;
    }
}

/** A record of the public data exchanged between guardians. */
export interface IKeyCeremonyGuardian {
    key_name: string;
    guardian_id: string;
    name: string;
    sequence_order: number;
    number_of_guardians: number;
    quorum: number;
    public_keys?: any;
    backups?: any[];
    verifications?: any[];
    challenges?: any[];
}

/** Describes the operations each guardian must fulfill to complete a key ceremony. */
export class KeyCeremonyGuardianState implements IKeyCeremonyGuardianState {
    public_key_shared?: KeyCeremonyGuardianStatus;
    backups_shared?: KeyCeremonyGuardianStatus;
    backups_verified?: KeyCeremonyGuardianStatus;

    constructor(data?: IKeyCeremonyGuardianState) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.public_key_shared = KeyCeremonyGuardianStatus.INCOMPLETE;
            this.backups_shared = KeyCeremonyGuardianStatus.INCOMPLETE;
            this.backups_verified = KeyCeremonyGuardianStatus.INCOMPLETE;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.public_key_shared = _data["public_key_shared"] !== undefined ? _data["public_key_shared"] : KeyCeremonyGuardianStatus.INCOMPLETE;
            this.backups_shared = _data["backups_shared"] !== undefined ? _data["backups_shared"] : KeyCeremonyGuardianStatus.INCOMPLETE;
            this.backups_verified = _data["backups_verified"] !== undefined ? _data["backups_verified"] : KeyCeremonyGuardianStatus.INCOMPLETE;
        }
    }

    static fromJS(data: any): KeyCeremonyGuardianState {
        data = typeof data === 'object' ? data : {};
        let result = new KeyCeremonyGuardianState();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["public_key_shared"] = this.public_key_shared;
        data["backups_shared"] = this.backups_shared;
        data["backups_verified"] = this.backups_verified;
        return data;
    }
}

/** Describes the operations each guardian must fulfill to complete a key ceremony. */
export interface IKeyCeremonyGuardianState {
    public_key_shared?: KeyCeremonyGuardianStatus;
    backups_shared?: KeyCeremonyGuardianStatus;
    backups_verified?: KeyCeremonyGuardianStatus;
}

/** Enumeration expressing the status of a guardian's operations. */
export enum KeyCeremonyGuardianStatus {
    INCOMPLETE = "INCOMPLETE",
    ERROR = "ERROR",
    COMPLETE = "COMPLETE",
}

/** Returns a collection of Key Ceremonies. */
export class KeyCeremonyQueryResponse implements IKeyCeremonyQueryResponse {
    status?: App__api__v1__models__base__ResponseStatus;
    message?: string;
    key_ceremonies!: KeyCeremony[];

    constructor(data?: IKeyCeremonyQueryResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.status = App__api__v1__models__base__ResponseStatus.Success;
            this.key_ceremonies = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.status = _data["status"] !== undefined ? _data["status"] : App__api__v1__models__base__ResponseStatus.Success;
            this.message = _data["message"];
            if (Array.isArray(_data["key_ceremonies"])) {
                this.key_ceremonies = [] as any;
                for (let item of _data["key_ceremonies"])
                    this.key_ceremonies!.push(KeyCeremony.fromJS(item));
            }
        }
    }

    static fromJS(data: any): KeyCeremonyQueryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new KeyCeremonyQueryResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status;
        data["message"] = this.message;
        if (Array.isArray(this.key_ceremonies)) {
            data["key_ceremonies"] = [];
            for (let item of this.key_ceremonies)
                data["key_ceremonies"].push(item.toJSON());
        }
        return data;
    }
}

/** Returns a collection of Key Ceremonies. */
export interface IKeyCeremonyQueryResponse {
    status?: App__api__v1__models__base__ResponseStatus;
    message?: string;
    key_ceremonies: KeyCeremony[];
}

/** Enumeration expressing the state of the key caremony. */
export enum KeyCeremonyState {
    CREATED = "CREATED",
    OPEN = "OPEN",
    CLOSED = "CLOSED",
    CHALLENGED = "CHALLENGED",
    CANCELLED = "CANCELLED",
}

/** Returns a subset of KeyCeremony data that describes only the state. */
export class KeyCeremonyStateResponse implements IKeyCeremonyStateResponse {
    key_name!: string;
    state!: KeyCeremonyState;
    guardian_status!: { [key: string]: KeyCeremonyGuardianState; };

    constructor(data?: IKeyCeremonyStateResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.guardian_status = {};
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key_name = _data["key_name"];
            this.state = _data["state"];
            if (_data["guardian_status"]) {
                this.guardian_status = {} as any;
                for (let key in _data["guardian_status"]) {
                    if (_data["guardian_status"].hasOwnProperty(key))
                        (<any>this.guardian_status)![key] = _data["guardian_status"][key] ? KeyCeremonyGuardianState.fromJS(_data["guardian_status"][key]) : new KeyCeremonyGuardianState();
                }
            }
        }
    }

    static fromJS(data: any): KeyCeremonyStateResponse {
        data = typeof data === 'object' ? data : {};
        let result = new KeyCeremonyStateResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key_name"] = this.key_name;
        data["state"] = this.state;
        if (this.guardian_status) {
            data["guardian_status"] = {};
            for (let key in this.guardian_status) {
                if (this.guardian_status.hasOwnProperty(key))
                    (<any>data["guardian_status"])[key] = this.guardian_status[key] ? this.guardian_status[key].toJSON() : <any>undefined;
            }
        }
        return data;
    }
}

/** Returns a subset of KeyCeremony data that describes only the state. */
export interface IKeyCeremonyStateResponse {
    key_name: string;
    state: KeyCeremonyState;
    guardian_status: { [key: string]: KeyCeremonyGuardianState; };
}

/** A request to build an Election Context for a given election. */
export class MakeElectionContextRequest implements IMakeElectionContextRequest {
    elgamal_public_key!: string;
    commitment_hash!: string;
    number_of_guardians!: number;
    quorum!: number;
    manifest_hash?: string;
    manifest?: any;

    constructor(data?: IMakeElectionContextRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.elgamal_public_key = _data["elgamal_public_key"];
            this.commitment_hash = _data["commitment_hash"];
            this.number_of_guardians = _data["number_of_guardians"];
            this.quorum = _data["quorum"];
            this.manifest_hash = _data["manifest_hash"];
            this.manifest = _data["manifest"];
        }
    }

    static fromJS(data: any): MakeElectionContextRequest {
        data = typeof data === 'object' ? data : {};
        let result = new MakeElectionContextRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["elgamal_public_key"] = this.elgamal_public_key;
        data["commitment_hash"] = this.commitment_hash;
        data["number_of_guardians"] = this.number_of_guardians;
        data["quorum"] = this.quorum;
        data["manifest_hash"] = this.manifest_hash;
        data["manifest"] = this.manifest;
        return data;
    }
}

/** A request to build an Election Context for a given election. */
export interface IMakeElectionContextRequest {
    elgamal_public_key: string;
    commitment_hash: string;
    number_of_guardians: number;
    quorum: number;
    manifest_hash?: string;
    manifest?: any;
}

/** A Ciphertext Election Context. */
export class MakeElectionContextResponse implements IMakeElectionContextResponse {
    status?: App__api__v1__models__base__ResponseStatus;
    message?: string;
    context?: any;

    constructor(data?: IMakeElectionContextResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.status = App__api__v1__models__base__ResponseStatus.Success;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.status = _data["status"] !== undefined ? _data["status"] : App__api__v1__models__base__ResponseStatus.Success;
            this.message = _data["message"];
            this.context = _data["context"];
        }
    }

    static fromJS(data: any): MakeElectionContextResponse {
        data = typeof data === 'object' ? data : {};
        let result = new MakeElectionContextResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status;
        data["message"] = this.message;
        data["context"] = this.context;
        return data;
    }
}

/** A Ciphertext Election Context. */
export interface IMakeElectionContextResponse {
    status?: App__api__v1__models__base__ResponseStatus;
    message?: string;
    context?: any;
}

/** A basic model object */
export class Manifest implements IManifest {
    manifest_hash?: any;
    manifest?: any;

    constructor(data?: IManifest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.manifest_hash = _data["manifest_hash"];
            this.manifest = _data["manifest"];
        }
    }

    static fromJS(data: any): Manifest {
        data = typeof data === 'object' ? data : {};
        let result = new Manifest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["manifest_hash"] = this.manifest_hash;
        data["manifest"] = this.manifest;
        return data;
    }
}

/** A basic model object */
export interface IManifest {
    manifest_hash?: any;
    manifest?: any;
}

/** A basic response */
export class ManifestQueryResponse implements IManifestQueryResponse {
    status?: App__api__v1__models__base__ResponseStatus;
    message?: string;
    manifests!: Manifest[];

    constructor(data?: IManifestQueryResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.status = App__api__v1__models__base__ResponseStatus.Success;
            this.manifests = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.status = _data["status"] !== undefined ? _data["status"] : App__api__v1__models__base__ResponseStatus.Success;
            this.message = _data["message"];
            if (Array.isArray(_data["manifests"])) {
                this.manifests = [] as any;
                for (let item of _data["manifests"])
                    this.manifests!.push(Manifest.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ManifestQueryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ManifestQueryResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status;
        data["message"] = this.message;
        if (Array.isArray(this.manifests)) {
            data["manifests"] = [];
            for (let item of this.manifests)
                data["manifests"].push(item.toJSON());
        }
        return data;
    }
}

/** A basic response */
export interface IManifestQueryResponse {
    status?: App__api__v1__models__base__ResponseStatus;
    message?: string;
    manifests: Manifest[];
}

/** A basic response */
export class ManifestSubmitResponse implements IManifestSubmitResponse {
    status?: App__api__v1__models__base__ResponseStatus;
    message?: string;
    manifest_hash?: any;

    constructor(data?: IManifestSubmitResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.status = App__api__v1__models__base__ResponseStatus.Success;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.status = _data["status"] !== undefined ? _data["status"] : App__api__v1__models__base__ResponseStatus.Success;
            this.message = _data["message"];
            this.manifest_hash = _data["manifest_hash"];
        }
    }

    static fromJS(data: any): ManifestSubmitResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ManifestSubmitResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status;
        data["message"] = this.message;
        data["manifest_hash"] = this.manifest_hash;
        return data;
    }
}

/** A basic response */
export interface IManifestSubmitResponse {
    status?: App__api__v1__models__base__ResponseStatus;
    message?: string;
    manifest_hash?: any;
}

/** A plaintext tally for a specific election. */
export class PlaintextTally implements IPlaintextTally {
    election_id!: string;
    tally_name!: string;
    created!: Date;
    state!: PlaintextTallyState;
    tally?: any;

    constructor(data?: IPlaintextTally) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.election_id = _data["election_id"];
            this.tally_name = _data["tally_name"];
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.state = _data["state"];
            this.tally = _data["tally"];
        }
    }

    static fromJS(data: any): PlaintextTally {
        data = typeof data === 'object' ? data : {};
        let result = new PlaintextTally();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["election_id"] = this.election_id;
        data["tally_name"] = this.tally_name;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["state"] = this.state;
        data["tally"] = this.tally;
        return data;
    }
}

/** A plaintext tally for a specific election. */
export interface IPlaintextTally {
    election_id: string;
    tally_name: string;
    created: Date;
    state: PlaintextTallyState;
    tally?: any;
}

/** A collection of Plaintext Tallies. */
export class PlaintextTallyQueryResponse implements IPlaintextTallyQueryResponse {
    status?: App__api__v1__models__base__ResponseStatus;
    message?: string;
    tallies?: PlaintextTally[];

    constructor(data?: IPlaintextTallyQueryResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.status = App__api__v1__models__base__ResponseStatus.Success;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.status = _data["status"] !== undefined ? _data["status"] : App__api__v1__models__base__ResponseStatus.Success;
            this.message = _data["message"];
            if (Array.isArray(_data["tallies"])) {
                this.tallies = [] as any;
                for (let item of _data["tallies"])
                    this.tallies!.push(PlaintextTally.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PlaintextTallyQueryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PlaintextTallyQueryResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status;
        data["message"] = this.message;
        if (Array.isArray(this.tallies)) {
            data["tallies"] = [];
            for (let item of this.tallies)
                data["tallies"].push(item.toJSON());
        }
        return data;
    }
}

/** A collection of Plaintext Tallies. */
export interface IPlaintextTallyQueryResponse {
    status?: App__api__v1__models__base__ResponseStatus;
    message?: string;
    tallies?: PlaintextTally[];
}

/** An enumeration. */
export enum PlaintextTallyState {
    CREATED = "CREATED",
    PROCESSING = "PROCESSING",
    ERROR = "ERROR",
    COMPLETE = "COMPLETE",
}

/** Request to publish the election joint key. */
export class PublishElectionJointKeyRequest implements IPublishElectionJointKeyRequest {
    key_name!: string;
    election_public_keys!: any[];

    constructor(data?: IPublishElectionJointKeyRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.election_public_keys = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key_name = _data["key_name"];
            if (Array.isArray(_data["election_public_keys"])) {
                this.election_public_keys = [] as any;
                for (let item of _data["election_public_keys"])
                    this.election_public_keys!.push(item);
            }
        }
    }

    static fromJS(data: any): PublishElectionJointKeyRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PublishElectionJointKeyRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key_name"] = this.key_name;
        if (Array.isArray(this.election_public_keys)) {
            data["election_public_keys"] = [];
            for (let item of this.election_public_keys)
                data["election_public_keys"].push(item);
        }
        return data;
    }
}

/** Request to publish the election joint key. */
export interface IPublishElectionJointKeyRequest {
    key_name: string;
    election_public_keys: any[];
}

/** An enumeration. */
export enum QueueMode {
    Local = "local",
    Remote = "remote",
}

/** Base class for settings, allowing values to be overridden by environment variables. This is useful in production for secrets you do not wish to save in code, it plays nicely with docker(-compose), Heroku and any 12 factor app design. */
export class Settings implements ISettings {
    aPI_MODE?: ApiMode;
    qUEUE_MODE?: QueueMode;
    sTORAGE_MODE?: StorageMode;
    aPI_V1_STR?: string;
    aPI_V1_1_STR?: string;
    bACKEND_CORS_ORIGINS?: string[];
    pROJECT_NAME?: string;
    mONGODB_URI?: string;
    mESSAGEQUEUE_URI?: string;
    aUTH_ALGORITHM?: string;
    aUTH_SECRET_KEY?: string;
    aUTH_ACCESS_TOKEN_EXPIRE_MINUTES?: number;
    dEFAULT_ADMIN_USERNAME?: string;
    dEFAULT_ADMIN_PASSWORD?: string;

    constructor(data?: ISettings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.aPI_MODE = ApiMode.Mediator;
            this.qUEUE_MODE = QueueMode.Local;
            this.sTORAGE_MODE = StorageMode.Local_storage;
            this.aPI_V1_STR = "/api/v1";
            this.aPI_V1_1_STR = "/api/v1_1";
            this.pROJECT_NAME = "electionguard-api-python";
            this.mONGODB_URI = "mongodb://root:example@localhost:27017";
            this.mESSAGEQUEUE_URI = "amqp://guest:guest@localhost:5672";
            this.aUTH_ALGORITHM = "HS256";
            this.aUTH_SECRET_KEY = "09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7";
            this.aUTH_ACCESS_TOKEN_EXPIRE_MINUTES = 30;
            this.dEFAULT_ADMIN_USERNAME = "default";
            this.dEFAULT_ADMIN_PASSWORD = "<this is a default value and should be changed>";
        }
    }

    init(_data?: any) {
        if (_data) {
            this.aPI_MODE = _data["API_MODE"] !== undefined ? _data["API_MODE"] : ApiMode.Mediator;
            this.qUEUE_MODE = _data["QUEUE_MODE"] !== undefined ? _data["QUEUE_MODE"] : QueueMode.Local;
            this.sTORAGE_MODE = _data["STORAGE_MODE"] !== undefined ? _data["STORAGE_MODE"] : StorageMode.Local_storage;
            this.aPI_V1_STR = _data["API_V1_STR"] !== undefined ? _data["API_V1_STR"] : "/api/v1";
            this.aPI_V1_1_STR = _data["API_V1_1_STR"] !== undefined ? _data["API_V1_1_STR"] : "/api/v1_1";
            if (Array.isArray(_data["BACKEND_CORS_ORIGINS"])) {
                this.bACKEND_CORS_ORIGINS = [] as any;
                for (let item of _data["BACKEND_CORS_ORIGINS"])
                    this.bACKEND_CORS_ORIGINS!.push(item);
            }
            this.pROJECT_NAME = _data["PROJECT_NAME"] !== undefined ? _data["PROJECT_NAME"] : "electionguard-api-python";
            this.mONGODB_URI = _data["MONGODB_URI"] !== undefined ? _data["MONGODB_URI"] : "mongodb://root:example@localhost:27017";
            this.mESSAGEQUEUE_URI = _data["MESSAGEQUEUE_URI"] !== undefined ? _data["MESSAGEQUEUE_URI"] : "amqp://guest:guest@localhost:5672";
            this.aUTH_ALGORITHM = _data["AUTH_ALGORITHM"] !== undefined ? _data["AUTH_ALGORITHM"] : "HS256";
            this.aUTH_SECRET_KEY = _data["AUTH_SECRET_KEY"] !== undefined ? _data["AUTH_SECRET_KEY"] : "09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7";
            this.aUTH_ACCESS_TOKEN_EXPIRE_MINUTES = _data["AUTH_ACCESS_TOKEN_EXPIRE_MINUTES"] !== undefined ? _data["AUTH_ACCESS_TOKEN_EXPIRE_MINUTES"] : 30;
            this.dEFAULT_ADMIN_USERNAME = _data["DEFAULT_ADMIN_USERNAME"] !== undefined ? _data["DEFAULT_ADMIN_USERNAME"] : "default";
            this.dEFAULT_ADMIN_PASSWORD = _data["DEFAULT_ADMIN_PASSWORD"] !== undefined ? _data["DEFAULT_ADMIN_PASSWORD"] : "<this is a default value and should be changed>";
        }
    }

    static fromJS(data: any): Settings {
        data = typeof data === 'object' ? data : {};
        let result = new Settings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["API_MODE"] = this.aPI_MODE;
        data["QUEUE_MODE"] = this.qUEUE_MODE;
        data["STORAGE_MODE"] = this.sTORAGE_MODE;
        data["API_V1_STR"] = this.aPI_V1_STR;
        data["API_V1_1_STR"] = this.aPI_V1_1_STR;
        if (Array.isArray(this.bACKEND_CORS_ORIGINS)) {
            data["BACKEND_CORS_ORIGINS"] = [];
            for (let item of this.bACKEND_CORS_ORIGINS)
                data["BACKEND_CORS_ORIGINS"].push(item);
        }
        data["PROJECT_NAME"] = this.pROJECT_NAME;
        data["MONGODB_URI"] = this.mONGODB_URI;
        data["MESSAGEQUEUE_URI"] = this.mESSAGEQUEUE_URI;
        data["AUTH_ALGORITHM"] = this.aUTH_ALGORITHM;
        data["AUTH_SECRET_KEY"] = this.aUTH_SECRET_KEY;
        data["AUTH_ACCESS_TOKEN_EXPIRE_MINUTES"] = this.aUTH_ACCESS_TOKEN_EXPIRE_MINUTES;
        data["DEFAULT_ADMIN_USERNAME"] = this.dEFAULT_ADMIN_USERNAME;
        data["DEFAULT_ADMIN_PASSWORD"] = this.dEFAULT_ADMIN_PASSWORD;
        return data;
    }
}

/** Base class for settings, allowing values to be overridden by environment variables. This is useful in production for secrets you do not wish to save in code, it plays nicely with docker(-compose), Heroku and any 12 factor app design. */
export interface ISettings {
    aPI_MODE?: ApiMode;
    qUEUE_MODE?: QueueMode;
    sTORAGE_MODE?: StorageMode;
    aPI_V1_STR?: string;
    aPI_V1_1_STR?: string;
    bACKEND_CORS_ORIGINS?: string[];
    pROJECT_NAME?: string;
    mONGODB_URI?: string;
    mESSAGEQUEUE_URI?: string;
    aUTH_ALGORITHM?: string;
    aUTH_SECRET_KEY?: string;
    aUTH_ACCESS_TOKEN_EXPIRE_MINUTES?: number;
    dEFAULT_ADMIN_USERNAME?: string;
    dEFAULT_ADMIN_PASSWORD?: string;
}

/** Spoil the enclosed ballots. */
export class SpoilBallotsRequest implements ISpoilBallotsRequest {
    election_id?: string;
    manifest?: any;
    context?: any;
    ballots!: any[];

    constructor(data?: ISpoilBallotsRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.ballots = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.election_id = _data["election_id"];
            this.manifest = _data["manifest"];
            this.context = _data["context"];
            if (Array.isArray(_data["ballots"])) {
                this.ballots = [] as any;
                for (let item of _data["ballots"])
                    this.ballots!.push(item);
            }
        }
    }

    static fromJS(data: any): SpoilBallotsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SpoilBallotsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["election_id"] = this.election_id;
        data["manifest"] = this.manifest;
        data["context"] = this.context;
        if (Array.isArray(this.ballots)) {
            data["ballots"] = [];
            for (let item of this.ballots)
                data["ballots"].push(item);
        }
        return data;
    }
}

/** Spoil the enclosed ballots. */
export interface ISpoilBallotsRequest {
    election_id?: string;
    manifest?: any;
    context?: any;
    ballots: any[];
}

/** An enumeration. */
export enum StorageMode {
    Local_storage = "local_storage",
    Mongo = "mongo",
}

/** Submit a ballot against a specific election. */
export class SubmitBallotsRequest implements ISubmitBallotsRequest {
    election_id?: string;
    manifest?: any;
    context?: any;
    ballots!: any[];

    constructor(data?: ISubmitBallotsRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.ballots = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.election_id = _data["election_id"];
            this.manifest = _data["manifest"];
            this.context = _data["context"];
            if (Array.isArray(_data["ballots"])) {
                this.ballots = [] as any;
                for (let item of _data["ballots"])
                    this.ballots!.push(item);
            }
        }
    }

    static fromJS(data: any): SubmitBallotsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SubmitBallotsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["election_id"] = this.election_id;
        data["manifest"] = this.manifest;
        data["context"] = this.context;
        if (Array.isArray(this.ballots)) {
            data["ballots"] = [];
            for (let item of this.ballots)
                data["ballots"].push(item);
        }
        return data;
    }
}

/** Submit a ballot against a specific election. */
export interface ISubmitBallotsRequest {
    election_id?: string;
    manifest?: any;
    context?: any;
    ballots: any[];
}

/** Submit an election. */
export class SubmitElectionRequest implements ISubmitElectionRequest {
    election_id!: string;
    key_name!: string;
    context?: any;
    manifest?: any;

    constructor(data?: ISubmitElectionRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.election_id = _data["election_id"];
            this.key_name = _data["key_name"];
            this.context = _data["context"];
            this.manifest = _data["manifest"];
        }
    }

    static fromJS(data: any): SubmitElectionRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SubmitElectionRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["election_id"] = this.election_id;
        data["key_name"] = this.key_name;
        data["context"] = this.context;
        data["manifest"] = this.manifest;
        return data;
    }
}

/** Submit an election. */
export interface ISubmitElectionRequest {
    election_id: string;
    key_name: string;
    context?: any;
    manifest?: any;
}

/** An access token and its type. */
export class Token implements IToken {
    access_token!: string;
    token_type!: string;

    constructor(data?: IToken) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.access_token = _data["access_token"];
            this.token_type = _data["token_type"];
        }
    }

    static fromJS(data: any): Token {
        data = typeof data === 'object' ? data : {};
        let result = new Token();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["access_token"] = this.access_token;
        data["token_type"] = this.token_type;
        return data;
    }
}

/** An access token and its type. */
export interface IToken {
    access_token: string;
    token_type: string;
}

/** A specific user in the system */
export class UserInfo implements IUserInfo {
    username!: string;
    scopes?: UserScope[];
    email?: string;
    disabled?: boolean;

    constructor(data?: IUserInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"];
            if (Array.isArray(_data["scopes"])) {
                this.scopes = [] as any;
                for (let item of _data["scopes"])
                    this.scopes!.push(item);
            }
            this.email = _data["email"];
            this.disabled = _data["disabled"];
        }
    }

    static fromJS(data: any): UserInfo {
        data = typeof data === 'object' ? data : {};
        let result = new UserInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        if (Array.isArray(this.scopes)) {
            data["scopes"] = [];
            for (let item of this.scopes)
                data["scopes"].push(item);
        }
        data["email"] = this.email;
        data["disabled"] = this.disabled;
        return data;
    }
}

/** A specific user in the system */
export interface IUserInfo {
    username: string;
    scopes?: UserScope[];
    email?: string;
    disabled?: boolean;
}

/** An enumeration. */
export enum UserScope {
    Admin = "admin",
    Auditor = "auditor",
    Guardian = "guardian",
    Voter = "voter",
}

/** Submit a ballot against a specific election description and contest to determine if it is accepted. */
export class ValidateBallotRequest implements IValidateBallotRequest {
    schema_override?: any;
    ballot?: any;
    manifest?: any;
    context?: any;

    constructor(data?: IValidateBallotRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.schema_override = _data["schema_override"];
            this.ballot = _data["ballot"];
            this.manifest = _data["manifest"];
            this.context = _data["context"];
        }
    }

    static fromJS(data: any): ValidateBallotRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ValidateBallotRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schema_override"] = this.schema_override;
        data["ballot"] = this.ballot;
        data["manifest"] = this.manifest;
        data["context"] = this.context;
        return data;
    }
}

/** Submit a ballot against a specific election description and contest to determine if it is accepted. */
export interface IValidateBallotRequest {
    schema_override?: any;
    ballot?: any;
    manifest?: any;
    context?: any;
}

/** A request to validate an Election Description. */
export class ValidateManifestRequest implements IValidateManifestRequest {
    schema_override?: any;
    manifest?: any;

    constructor(data?: IValidateManifestRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.schema_override = _data["schema_override"];
            this.manifest = _data["manifest"];
        }
    }

    static fromJS(data: any): ValidateManifestRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ValidateManifestRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["schema_override"] = this.schema_override;
        data["manifest"] = this.manifest;
        return data;
    }
}

/** A request to validate an Election Description. */
export interface IValidateManifestRequest {
    schema_override?: any;
    manifest?: any;
}

/** Response for validating models */
export class ValidateManifestResponse implements IValidateManifestResponse {
    status?: App__api__v1__models__base__ResponseStatus;
    message?: string;
    details?: string;
    manifest_hash?: string;

    constructor(data?: IValidateManifestResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.status = App__api__v1__models__base__ResponseStatus.Success;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.status = _data["status"] !== undefined ? _data["status"] : App__api__v1__models__base__ResponseStatus.Success;
            this.message = _data["message"];
            this.details = _data["details"];
            this.manifest_hash = _data["manifest_hash"];
        }
    }

    static fromJS(data: any): ValidateManifestResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ValidateManifestResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status;
        data["message"] = this.message;
        data["details"] = this.details;
        data["manifest_hash"] = this.manifest_hash;
        return data;
    }
}

/** Response for validating models */
export interface IValidateManifestResponse {
    status?: App__api__v1__models__base__ResponseStatus;
    message?: string;
    details?: string;
    manifest_hash?: string;
}

export class ValidationError implements IValidationError {
    loc!: string[];
    msg!: string;
    type!: string;

    constructor(data?: IValidationError) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.loc = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["loc"])) {
                this.loc = [] as any;
                for (let item of _data["loc"])
                    this.loc!.push(item);
            }
            this.msg = _data["msg"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): ValidationError {
        data = typeof data === 'object' ? data : {};
        let result = new ValidationError();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.loc)) {
            data["loc"] = [];
            for (let item of this.loc)
                data["loc"].push(item);
        }
        data["msg"] = this.msg;
        data["type"] = this.type;
        return data;
    }
}

export interface IValidationError {
    loc: string[];
    msg: string;
    type: string;
}

/** A basic response */
export class App__api__v1_1__models__base__BaseResponse implements IApp__api__v1_1__models__base__BaseResponse {
    status?: App__api__v1_1__models__base__ResponseStatus;
    message?: string;

    constructor(data?: IApp__api__v1_1__models__base__BaseResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.status = App__api__v1_1__models__base__ResponseStatus.Success;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.status = _data["status"] !== undefined ? _data["status"] : App__api__v1_1__models__base__ResponseStatus.Success;
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): App__api__v1_1__models__base__BaseResponse {
        data = typeof data === 'object' ? data : {};
        let result = new App__api__v1_1__models__base__BaseResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status;
        data["message"] = this.message;
        return data;
    }
}

/** A basic response */
export interface IApp__api__v1_1__models__base__BaseResponse {
    status?: App__api__v1_1__models__base__ResponseStatus;
    message?: string;
}

/** An enumeration. */
export enum App__api__v1_1__models__base__ResponseStatus {
    Fail = "fail",
    Success = "success",
}

/** A basic response */
export class App__api__v1__models__base__BaseResponse implements IApp__api__v1__models__base__BaseResponse {
    status?: App__api__v1__models__base__ResponseStatus;
    message?: string;

    constructor(data?: IApp__api__v1__models__base__BaseResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.status = App__api__v1__models__base__ResponseStatus.Success;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.status = _data["status"] !== undefined ? _data["status"] : App__api__v1__models__base__ResponseStatus.Success;
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): App__api__v1__models__base__BaseResponse {
        data = typeof data === 'object' ? data : {};
        let result = new App__api__v1__models__base__BaseResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status;
        data["message"] = this.message;
        return data;
    }
}

/** A basic response */
export interface IApp__api__v1__models__base__BaseResponse {
    status?: App__api__v1__models__base__ResponseStatus;
    message?: string;
}

/** An enumeration. */
export enum App__api__v1__models__base__ResponseStatus {
    Fail = "fail",
    Success = "success",
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}